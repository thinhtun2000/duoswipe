package body Libadalang.Lexer_State_Machine is

   Is_Trivia : constant array (Token_Kind) of Boolean :=
     (Ada_Termination => False, Ada_Lexing_Failure => True,
      Ada_Identifier  => False, Ada_All => False, Ada_Abort => False,
      Ada_Else        => False, Ada_New => False, Ada_Return => False,
      Ada_Abs         => False, Ada_Elsif => False, Ada_Not => False,
      Ada_Reverse     => False, Ada_End => False, Ada_Null => False,
      Ada_Accept      => False, Ada_Entry => False, Ada_Select => False,
      Ada_Access      => False, Ada_Exception => False, Ada_Of => False,
      Ada_Separate    => False, Ada_Exit => False, Ada_Or => False,
      Ada_Others      => False, Ada_Subtype => False, Ada_And => False,
      Ada_For         => False, Ada_Out => False, Ada_Array => False,
      Ada_Function    => False, Ada_At => False, Ada_Generic => False,
      Ada_Package     => False, Ada_Task => False, Ada_Begin => False,
      Ada_Goto        => False, Ada_Pragma => False, Ada_Terminate => False,
      Ada_Body        => False, Ada_Private => False, Ada_Then => False,
      Ada_If          => False, Ada_Procedure => False, Ada_Type => False,
      Ada_Case        => False, Ada_In => False, Ada_Constant => False,
      Ada_Is          => False, Ada_Raise => False, Ada_Use => False,
      Ada_Declare     => False, Ada_Range => False, Ada_Delay => False,
      Ada_Limited     => False, Ada_Record => False, Ada_When => False,
      Ada_Delta       => False, Ada_Loop => False, Ada_Rem => False,
      Ada_While       => False, Ada_Digits => False, Ada_Renames => False,
      Ada_Do          => False, Ada_Mod => False, Ada_Xor => False,
      Ada_Par_Close   => False, Ada_Par_Open => False, Ada_Semicolon => False,
      Ada_Colon       => False, Ada_Comma => False, Ada_Doubledot => False,
      Ada_Dot         => False, Ada_Diamond => False, Ada_Lte => False,
      Ada_Gte         => False, Ada_Arrow => False, Ada_Equal => False,
      Ada_Lt => False, Ada_Gt => False, Ada_Plus => False, Ada_Minus => False,
      Ada_Power       => False, Ada_Mult => False, Ada_Amp => False,
      Ada_Notequal    => False, Ada_Divide => False, Ada_Tick => False,
      Ada_Pipe        => False, Ada_Assign => False, Ada_Label_Start => False,
      Ada_Label_End   => False, Ada_Target => False, Ada_String => False,
      Ada_Char        => False, Ada_With => False, Ada_Decimal => False,
      Ada_Integer     => False, Ada_Comment => True, Ada_Prep_Line => True,
      Ada_Whitespace  => True);

   type Character_Range is record
      First, Last : Character_Type;
   end record;

   type Character_Range_Array is array (Positive range <>) of Character_Range;
   --  Sorted list of dijoint character ranges

   function Contains
     (Char : Character_Type; Ranges : Character_Range_Array) return Boolean;
   --  Return whether Char is included in the given ranges

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize
     (Self : out Lexer_State; Input : Text_Access; Input_First : Positive;
      Input_Last :     Natural)
   is
   begin
      Self.Input       := Input;
      Self.Input_First := Input_First;
      Self.Input_Last  := Input_Last;
      Self.Has_Next    := True;
      Self.Last_Token  :=
        (Kind      => Ada_Termination, Text_First => Input_First,
         Text_Last => Input_First - 1);
      Self.Last_Token_Kind := Ada_Termination;
   end Initialize;

   ----------------
   -- Last_Token --
   ----------------

   function Last_Token (Self : Lexer_State) return Lexed_Token is
   begin
      return Self.Last_Token;
   end Last_Token;

   --------------
   -- Has_Next --
   --------------

   function Has_Next (Self : Lexer_State) return Boolean is
   begin
      return Self.Has_Next;
   end Has_Next;

   --------------
   -- Contains --
   --------------

   function Contains
     (Char : Character_Type; Ranges : Character_Range_Array) return Boolean
   is
      Low  : Natural := Ranges'First;
      High : Natural := Ranges'Last;
   begin
      while Low <= High loop
         declare
            Middle : constant Natural := (Low + High) / 2;
            R      : Character_Range renames Ranges (Middle);
         begin
            if Char < R.First then
               High := Middle - 1;
            elsif Char > R.Last then
               Low := Middle + 1;
            else
               return True;
            end if;
         end;
      end loop;
      return False;
   end Contains;

   Ranges_0 : constant Character_Range_Array :=
     ((Character_Type'Val (192), Character_Type'Val (214)),
      (Character_Type'Val (216), Character_Type'Val (222)),
      (Character_Type'Val (256), Character_Type'Val (256)),
      (Character_Type'Val (258), Character_Type'Val (258)),
      (Character_Type'Val (260), Character_Type'Val (260)),
      (Character_Type'Val (262), Character_Type'Val (262)),
      (Character_Type'Val (264), Character_Type'Val (264)),
      (Character_Type'Val (266), Character_Type'Val (266)),
      (Character_Type'Val (268), Character_Type'Val (268)),
      (Character_Type'Val (270), Character_Type'Val (270)),
      (Character_Type'Val (272), Character_Type'Val (272)),
      (Character_Type'Val (274), Character_Type'Val (274)),
      (Character_Type'Val (276), Character_Type'Val (276)),
      (Character_Type'Val (278), Character_Type'Val (278)),
      (Character_Type'Val (280), Character_Type'Val (280)),
      (Character_Type'Val (282), Character_Type'Val (282)),
      (Character_Type'Val (284), Character_Type'Val (284)),
      (Character_Type'Val (286), Character_Type'Val (286)),
      (Character_Type'Val (288), Character_Type'Val (288)),
      (Character_Type'Val (290), Character_Type'Val (290)),
      (Character_Type'Val (292), Character_Type'Val (292)),
      (Character_Type'Val (294), Character_Type'Val (294)),
      (Character_Type'Val (296), Character_Type'Val (296)),
      (Character_Type'Val (298), Character_Type'Val (298)),
      (Character_Type'Val (300), Character_Type'Val (300)),
      (Character_Type'Val (302), Character_Type'Val (302)),
      (Character_Type'Val (304), Character_Type'Val (304)),
      (Character_Type'Val (306), Character_Type'Val (306)),
      (Character_Type'Val (308), Character_Type'Val (308)),
      (Character_Type'Val (310), Character_Type'Val (310)),
      (Character_Type'Val (313), Character_Type'Val (313)),
      (Character_Type'Val (315), Character_Type'Val (315)),
      (Character_Type'Val (317), Character_Type'Val (317)),
      (Character_Type'Val (319), Character_Type'Val (319)),
      (Character_Type'Val (321), Character_Type'Val (321)),
      (Character_Type'Val (323), Character_Type'Val (323)),
      (Character_Type'Val (325), Character_Type'Val (325)),
      (Character_Type'Val (327), Character_Type'Val (327)),
      (Character_Type'Val (330), Character_Type'Val (330)),
      (Character_Type'Val (332), Character_Type'Val (332)),
      (Character_Type'Val (334), Character_Type'Val (334)),
      (Character_Type'Val (336), Character_Type'Val (336)),
      (Character_Type'Val (338), Character_Type'Val (338)),
      (Character_Type'Val (340), Character_Type'Val (340)),
      (Character_Type'Val (342), Character_Type'Val (342)),
      (Character_Type'Val (344), Character_Type'Val (344)),
      (Character_Type'Val (346), Character_Type'Val (346)),
      (Character_Type'Val (348), Character_Type'Val (348)),
      (Character_Type'Val (350), Character_Type'Val (350)),
      (Character_Type'Val (352), Character_Type'Val (352)),
      (Character_Type'Val (354), Character_Type'Val (354)),
      (Character_Type'Val (356), Character_Type'Val (356)),
      (Character_Type'Val (358), Character_Type'Val (358)),
      (Character_Type'Val (360), Character_Type'Val (360)),
      (Character_Type'Val (362), Character_Type'Val (362)),
      (Character_Type'Val (364), Character_Type'Val (364)),
      (Character_Type'Val (366), Character_Type'Val (366)),
      (Character_Type'Val (368), Character_Type'Val (368)),
      (Character_Type'Val (370), Character_Type'Val (370)),
      (Character_Type'Val (372), Character_Type'Val (372)),
      (Character_Type'Val (374), Character_Type'Val (374)),
      (Character_Type'Val (376), Character_Type'Val (377)),
      (Character_Type'Val (379), Character_Type'Val (379)),
      (Character_Type'Val (381), Character_Type'Val (381)),
      (Character_Type'Val (385), Character_Type'Val (386)),
      (Character_Type'Val (388), Character_Type'Val (388)),
      (Character_Type'Val (390), Character_Type'Val (391)),
      (Character_Type'Val (393), Character_Type'Val (395)),
      (Character_Type'Val (398), Character_Type'Val (401)),
      (Character_Type'Val (403), Character_Type'Val (404)),
      (Character_Type'Val (406), Character_Type'Val (408)),
      (Character_Type'Val (412), Character_Type'Val (413)),
      (Character_Type'Val (415), Character_Type'Val (416)),
      (Character_Type'Val (418), Character_Type'Val (418)),
      (Character_Type'Val (420), Character_Type'Val (420)),
      (Character_Type'Val (422), Character_Type'Val (423)),
      (Character_Type'Val (425), Character_Type'Val (425)),
      (Character_Type'Val (428), Character_Type'Val (428)),
      (Character_Type'Val (430), Character_Type'Val (431)),
      (Character_Type'Val (433), Character_Type'Val (435)),
      (Character_Type'Val (437), Character_Type'Val (437)),
      (Character_Type'Val (439), Character_Type'Val (440)),
      (Character_Type'Val (444), Character_Type'Val (444)),
      (Character_Type'Val (452), Character_Type'Val (452)),
      (Character_Type'Val (455), Character_Type'Val (455)),
      (Character_Type'Val (458), Character_Type'Val (458)),
      (Character_Type'Val (461), Character_Type'Val (461)),
      (Character_Type'Val (463), Character_Type'Val (463)),
      (Character_Type'Val (465), Character_Type'Val (465)),
      (Character_Type'Val (467), Character_Type'Val (467)),
      (Character_Type'Val (469), Character_Type'Val (469)),
      (Character_Type'Val (471), Character_Type'Val (471)),
      (Character_Type'Val (473), Character_Type'Val (473)),
      (Character_Type'Val (475), Character_Type'Val (475)),
      (Character_Type'Val (478), Character_Type'Val (478)),
      (Character_Type'Val (480), Character_Type'Val (480)),
      (Character_Type'Val (482), Character_Type'Val (482)),
      (Character_Type'Val (484), Character_Type'Val (484)),
      (Character_Type'Val (486), Character_Type'Val (486)),
      (Character_Type'Val (488), Character_Type'Val (488)),
      (Character_Type'Val (490), Character_Type'Val (490)),
      (Character_Type'Val (492), Character_Type'Val (492)),
      (Character_Type'Val (494), Character_Type'Val (494)),
      (Character_Type'Val (497), Character_Type'Val (497)),
      (Character_Type'Val (500), Character_Type'Val (500)),
      (Character_Type'Val (502), Character_Type'Val (504)),
      (Character_Type'Val (506), Character_Type'Val (506)),
      (Character_Type'Val (508), Character_Type'Val (508)),
      (Character_Type'Val (510), Character_Type'Val (510)),
      (Character_Type'Val (512), Character_Type'Val (512)),
      (Character_Type'Val (514), Character_Type'Val (514)),
      (Character_Type'Val (516), Character_Type'Val (516)),
      (Character_Type'Val (518), Character_Type'Val (518)),
      (Character_Type'Val (520), Character_Type'Val (520)),
      (Character_Type'Val (522), Character_Type'Val (522)),
      (Character_Type'Val (524), Character_Type'Val (524)),
      (Character_Type'Val (526), Character_Type'Val (526)),
      (Character_Type'Val (528), Character_Type'Val (528)),
      (Character_Type'Val (530), Character_Type'Val (530)),
      (Character_Type'Val (532), Character_Type'Val (532)),
      (Character_Type'Val (534), Character_Type'Val (534)),
      (Character_Type'Val (536), Character_Type'Val (536)),
      (Character_Type'Val (538), Character_Type'Val (538)),
      (Character_Type'Val (540), Character_Type'Val (540)),
      (Character_Type'Val (542), Character_Type'Val (542)),
      (Character_Type'Val (544), Character_Type'Val (544)),
      (Character_Type'Val (546), Character_Type'Val (546)),
      (Character_Type'Val (548), Character_Type'Val (548)),
      (Character_Type'Val (550), Character_Type'Val (550)),
      (Character_Type'Val (552), Character_Type'Val (552)),
      (Character_Type'Val (554), Character_Type'Val (554)),
      (Character_Type'Val (556), Character_Type'Val (556)),
      (Character_Type'Val (558), Character_Type'Val (558)),
      (Character_Type'Val (560), Character_Type'Val (560)),
      (Character_Type'Val (562), Character_Type'Val (562)),
      (Character_Type'Val (570), Character_Type'Val (571)),
      (Character_Type'Val (573), Character_Type'Val (574)),
      (Character_Type'Val (577), Character_Type'Val (577)),
      (Character_Type'Val (579), Character_Type'Val (582)),
      (Character_Type'Val (584), Character_Type'Val (584)),
      (Character_Type'Val (586), Character_Type'Val (586)),
      (Character_Type'Val (588), Character_Type'Val (588)),
      (Character_Type'Val (590), Character_Type'Val (590)),
      (Character_Type'Val (880), Character_Type'Val (880)),
      (Character_Type'Val (882), Character_Type'Val (882)),
      (Character_Type'Val (886), Character_Type'Val (886)),
      (Character_Type'Val (902), Character_Type'Val (902)),
      (Character_Type'Val (904), Character_Type'Val (906)),
      (Character_Type'Val (908), Character_Type'Val (908)),
      (Character_Type'Val (910), Character_Type'Val (911)),
      (Character_Type'Val (913), Character_Type'Val (929)),
      (Character_Type'Val (931), Character_Type'Val (939)),
      (Character_Type'Val (975), Character_Type'Val (975)),
      (Character_Type'Val (978), Character_Type'Val (980)),
      (Character_Type'Val (984), Character_Type'Val (984)),
      (Character_Type'Val (986), Character_Type'Val (986)),
      (Character_Type'Val (988), Character_Type'Val (988)),
      (Character_Type'Val (990), Character_Type'Val (990)),
      (Character_Type'Val (992), Character_Type'Val (992)),
      (Character_Type'Val (994), Character_Type'Val (994)),
      (Character_Type'Val (996), Character_Type'Val (996)),
      (Character_Type'Val (998), Character_Type'Val (998)),
      (Character_Type'Val (1_000), Character_Type'Val (1_000)),
      (Character_Type'Val (1_002), Character_Type'Val (1_002)),
      (Character_Type'Val (1_004), Character_Type'Val (1_004)),
      (Character_Type'Val (1_006), Character_Type'Val (1_006)),
      (Character_Type'Val (1_012), Character_Type'Val (1_012)),
      (Character_Type'Val (1_015), Character_Type'Val (1_015)),
      (Character_Type'Val (1_017), Character_Type'Val (1_018)),
      (Character_Type'Val (1_021), Character_Type'Val (1_071)),
      (Character_Type'Val (1_120), Character_Type'Val (1_120)),
      (Character_Type'Val (1_122), Character_Type'Val (1_122)),
      (Character_Type'Val (1_124), Character_Type'Val (1_124)),
      (Character_Type'Val (1_126), Character_Type'Val (1_126)),
      (Character_Type'Val (1_128), Character_Type'Val (1_128)),
      (Character_Type'Val (1_130), Character_Type'Val (1_130)),
      (Character_Type'Val (1_132), Character_Type'Val (1_132)),
      (Character_Type'Val (1_134), Character_Type'Val (1_134)),
      (Character_Type'Val (1_136), Character_Type'Val (1_136)),
      (Character_Type'Val (1_138), Character_Type'Val (1_138)),
      (Character_Type'Val (1_140), Character_Type'Val (1_140)),
      (Character_Type'Val (1_142), Character_Type'Val (1_142)),
      (Character_Type'Val (1_144), Character_Type'Val (1_144)),
      (Character_Type'Val (1_146), Character_Type'Val (1_146)),
      (Character_Type'Val (1_148), Character_Type'Val (1_148)),
      (Character_Type'Val (1_150), Character_Type'Val (1_150)),
      (Character_Type'Val (1_152), Character_Type'Val (1_152)),
      (Character_Type'Val (1_162), Character_Type'Val (1_162)),
      (Character_Type'Val (1_164), Character_Type'Val (1_164)),
      (Character_Type'Val (1_166), Character_Type'Val (1_166)),
      (Character_Type'Val (1_168), Character_Type'Val (1_168)),
      (Character_Type'Val (1_170), Character_Type'Val (1_170)),
      (Character_Type'Val (1_172), Character_Type'Val (1_172)),
      (Character_Type'Val (1_174), Character_Type'Val (1_174)),
      (Character_Type'Val (1_176), Character_Type'Val (1_176)),
      (Character_Type'Val (1_178), Character_Type'Val (1_178)),
      (Character_Type'Val (1_180), Character_Type'Val (1_180)),
      (Character_Type'Val (1_182), Character_Type'Val (1_182)),
      (Character_Type'Val (1_184), Character_Type'Val (1_184)),
      (Character_Type'Val (1_186), Character_Type'Val (1_186)),
      (Character_Type'Val (1_188), Character_Type'Val (1_188)),
      (Character_Type'Val (1_190), Character_Type'Val (1_190)),
      (Character_Type'Val (1_192), Character_Type'Val (1_192)),
      (Character_Type'Val (1_194), Character_Type'Val (1_194)),
      (Character_Type'Val (1_196), Character_Type'Val (1_196)),
      (Character_Type'Val (1_198), Character_Type'Val (1_198)),
      (Character_Type'Val (1_200), Character_Type'Val (1_200)),
      (Character_Type'Val (1_202), Character_Type'Val (1_202)),
      (Character_Type'Val (1_204), Character_Type'Val (1_204)),
      (Character_Type'Val (1_206), Character_Type'Val (1_206)),
      (Character_Type'Val (1_208), Character_Type'Val (1_208)),
      (Character_Type'Val (1_210), Character_Type'Val (1_210)),
      (Character_Type'Val (1_212), Character_Type'Val (1_212)),
      (Character_Type'Val (1_214), Character_Type'Val (1_214)),
      (Character_Type'Val (1_216), Character_Type'Val (1_217)),
      (Character_Type'Val (1_219), Character_Type'Val (1_219)),
      (Character_Type'Val (1_221), Character_Type'Val (1_221)),
      (Character_Type'Val (1_223), Character_Type'Val (1_223)),
      (Character_Type'Val (1_225), Character_Type'Val (1_225)),
      (Character_Type'Val (1_227), Character_Type'Val (1_227)),
      (Character_Type'Val (1_229), Character_Type'Val (1_229)),
      (Character_Type'Val (1_232), Character_Type'Val (1_232)),
      (Character_Type'Val (1_234), Character_Type'Val (1_234)),
      (Character_Type'Val (1_236), Character_Type'Val (1_236)),
      (Character_Type'Val (1_238), Character_Type'Val (1_238)),
      (Character_Type'Val (1_240), Character_Type'Val (1_240)),
      (Character_Type'Val (1_242), Character_Type'Val (1_242)),
      (Character_Type'Val (1_244), Character_Type'Val (1_244)),
      (Character_Type'Val (1_246), Character_Type'Val (1_246)),
      (Character_Type'Val (1_248), Character_Type'Val (1_248)),
      (Character_Type'Val (1_250), Character_Type'Val (1_250)),
      (Character_Type'Val (1_252), Character_Type'Val (1_252)),
      (Character_Type'Val (1_254), Character_Type'Val (1_254)),
      (Character_Type'Val (1_256), Character_Type'Val (1_256)),
      (Character_Type'Val (1_258), Character_Type'Val (1_258)),
      (Character_Type'Val (1_260), Character_Type'Val (1_260)),
      (Character_Type'Val (1_262), Character_Type'Val (1_262)),
      (Character_Type'Val (1_264), Character_Type'Val (1_264)),
      (Character_Type'Val (1_266), Character_Type'Val (1_266)),
      (Character_Type'Val (1_268), Character_Type'Val (1_268)),
      (Character_Type'Val (1_270), Character_Type'Val (1_270)),
      (Character_Type'Val (1_272), Character_Type'Val (1_272)),
      (Character_Type'Val (1_274), Character_Type'Val (1_274)),
      (Character_Type'Val (1_276), Character_Type'Val (1_276)),
      (Character_Type'Val (1_278), Character_Type'Val (1_278)),
      (Character_Type'Val (1_280), Character_Type'Val (1_280)),
      (Character_Type'Val (1_282), Character_Type'Val (1_282)),
      (Character_Type'Val (1_284), Character_Type'Val (1_284)),
      (Character_Type'Val (1_286), Character_Type'Val (1_286)),
      (Character_Type'Val (1_288), Character_Type'Val (1_288)),
      (Character_Type'Val (1_290), Character_Type'Val (1_290)),
      (Character_Type'Val (1_292), Character_Type'Val (1_292)),
      (Character_Type'Val (1_294), Character_Type'Val (1_294)),
      (Character_Type'Val (1_296), Character_Type'Val (1_296)),
      (Character_Type'Val (1_298), Character_Type'Val (1_298)),
      (Character_Type'Val (1_300), Character_Type'Val (1_300)),
      (Character_Type'Val (1_302), Character_Type'Val (1_302)),
      (Character_Type'Val (1_304), Character_Type'Val (1_304)),
      (Character_Type'Val (1_306), Character_Type'Val (1_306)),
      (Character_Type'Val (1_308), Character_Type'Val (1_308)),
      (Character_Type'Val (1_310), Character_Type'Val (1_310)),
      (Character_Type'Val (1_312), Character_Type'Val (1_312)),
      (Character_Type'Val (1_314), Character_Type'Val (1_314)),
      (Character_Type'Val (1_316), Character_Type'Val (1_316)),
      (Character_Type'Val (1_329), Character_Type'Val (1_366)),
      (Character_Type'Val (4_256), Character_Type'Val (4_293)),
      (Character_Type'Val (7_680), Character_Type'Val (7_680)),
      (Character_Type'Val (7_682), Character_Type'Val (7_682)),
      (Character_Type'Val (7_684), Character_Type'Val (7_684)),
      (Character_Type'Val (7_686), Character_Type'Val (7_686)),
      (Character_Type'Val (7_688), Character_Type'Val (7_688)),
      (Character_Type'Val (7_690), Character_Type'Val (7_690)),
      (Character_Type'Val (7_692), Character_Type'Val (7_692)),
      (Character_Type'Val (7_694), Character_Type'Val (7_694)),
      (Character_Type'Val (7_696), Character_Type'Val (7_696)),
      (Character_Type'Val (7_698), Character_Type'Val (7_698)),
      (Character_Type'Val (7_700), Character_Type'Val (7_700)),
      (Character_Type'Val (7_702), Character_Type'Val (7_702)),
      (Character_Type'Val (7_704), Character_Type'Val (7_704)),
      (Character_Type'Val (7_706), Character_Type'Val (7_706)),
      (Character_Type'Val (7_708), Character_Type'Val (7_708)),
      (Character_Type'Val (7_710), Character_Type'Val (7_710)),
      (Character_Type'Val (7_712), Character_Type'Val (7_712)),
      (Character_Type'Val (7_714), Character_Type'Val (7_714)),
      (Character_Type'Val (7_716), Character_Type'Val (7_716)),
      (Character_Type'Val (7_718), Character_Type'Val (7_718)),
      (Character_Type'Val (7_720), Character_Type'Val (7_720)),
      (Character_Type'Val (7_722), Character_Type'Val (7_722)),
      (Character_Type'Val (7_724), Character_Type'Val (7_724)),
      (Character_Type'Val (7_726), Character_Type'Val (7_726)),
      (Character_Type'Val (7_728), Character_Type'Val (7_728)),
      (Character_Type'Val (7_730), Character_Type'Val (7_730)),
      (Character_Type'Val (7_732), Character_Type'Val (7_732)),
      (Character_Type'Val (7_734), Character_Type'Val (7_734)),
      (Character_Type'Val (7_736), Character_Type'Val (7_736)),
      (Character_Type'Val (7_738), Character_Type'Val (7_738)),
      (Character_Type'Val (7_740), Character_Type'Val (7_740)),
      (Character_Type'Val (7_742), Character_Type'Val (7_742)),
      (Character_Type'Val (7_744), Character_Type'Val (7_744)),
      (Character_Type'Val (7_746), Character_Type'Val (7_746)),
      (Character_Type'Val (7_748), Character_Type'Val (7_748)),
      (Character_Type'Val (7_750), Character_Type'Val (7_750)),
      (Character_Type'Val (7_752), Character_Type'Val (7_752)),
      (Character_Type'Val (7_754), Character_Type'Val (7_754)),
      (Character_Type'Val (7_756), Character_Type'Val (7_756)),
      (Character_Type'Val (7_758), Character_Type'Val (7_758)),
      (Character_Type'Val (7_760), Character_Type'Val (7_760)),
      (Character_Type'Val (7_762), Character_Type'Val (7_762)),
      (Character_Type'Val (7_764), Character_Type'Val (7_764)),
      (Character_Type'Val (7_766), Character_Type'Val (7_766)),
      (Character_Type'Val (7_768), Character_Type'Val (7_768)),
      (Character_Type'Val (7_770), Character_Type'Val (7_770)),
      (Character_Type'Val (7_772), Character_Type'Val (7_772)),
      (Character_Type'Val (7_774), Character_Type'Val (7_774)),
      (Character_Type'Val (7_776), Character_Type'Val (7_776)),
      (Character_Type'Val (7_778), Character_Type'Val (7_778)),
      (Character_Type'Val (7_780), Character_Type'Val (7_780)),
      (Character_Type'Val (7_782), Character_Type'Val (7_782)),
      (Character_Type'Val (7_784), Character_Type'Val (7_784)),
      (Character_Type'Val (7_786), Character_Type'Val (7_786)),
      (Character_Type'Val (7_788), Character_Type'Val (7_788)),
      (Character_Type'Val (7_790), Character_Type'Val (7_790)),
      (Character_Type'Val (7_792), Character_Type'Val (7_792)),
      (Character_Type'Val (7_794), Character_Type'Val (7_794)),
      (Character_Type'Val (7_796), Character_Type'Val (7_796)),
      (Character_Type'Val (7_798), Character_Type'Val (7_798)),
      (Character_Type'Val (7_800), Character_Type'Val (7_800)),
      (Character_Type'Val (7_802), Character_Type'Val (7_802)),
      (Character_Type'Val (7_804), Character_Type'Val (7_804)),
      (Character_Type'Val (7_806), Character_Type'Val (7_806)),
      (Character_Type'Val (7_808), Character_Type'Val (7_808)),
      (Character_Type'Val (7_810), Character_Type'Val (7_810)),
      (Character_Type'Val (7_812), Character_Type'Val (7_812)),
      (Character_Type'Val (7_814), Character_Type'Val (7_814)),
      (Character_Type'Val (7_816), Character_Type'Val (7_816)),
      (Character_Type'Val (7_818), Character_Type'Val (7_818)),
      (Character_Type'Val (7_820), Character_Type'Val (7_820)),
      (Character_Type'Val (7_822), Character_Type'Val (7_822)),
      (Character_Type'Val (7_824), Character_Type'Val (7_824)),
      (Character_Type'Val (7_826), Character_Type'Val (7_826)),
      (Character_Type'Val (7_828), Character_Type'Val (7_828)),
      (Character_Type'Val (7_838), Character_Type'Val (7_838)),
      (Character_Type'Val (7_840), Character_Type'Val (7_840)),
      (Character_Type'Val (7_842), Character_Type'Val (7_842)),
      (Character_Type'Val (7_844), Character_Type'Val (7_844)),
      (Character_Type'Val (7_846), Character_Type'Val (7_846)),
      (Character_Type'Val (7_848), Character_Type'Val (7_848)),
      (Character_Type'Val (7_850), Character_Type'Val (7_850)),
      (Character_Type'Val (7_852), Character_Type'Val (7_852)),
      (Character_Type'Val (7_854), Character_Type'Val (7_854)),
      (Character_Type'Val (7_856), Character_Type'Val (7_856)),
      (Character_Type'Val (7_858), Character_Type'Val (7_858)),
      (Character_Type'Val (7_860), Character_Type'Val (7_860)),
      (Character_Type'Val (7_862), Character_Type'Val (7_862)),
      (Character_Type'Val (7_864), Character_Type'Val (7_864)),
      (Character_Type'Val (7_866), Character_Type'Val (7_866)),
      (Character_Type'Val (7_868), Character_Type'Val (7_868)),
      (Character_Type'Val (7_870), Character_Type'Val (7_870)),
      (Character_Type'Val (7_872), Character_Type'Val (7_872)),
      (Character_Type'Val (7_874), Character_Type'Val (7_874)),
      (Character_Type'Val (7_876), Character_Type'Val (7_876)),
      (Character_Type'Val (7_878), Character_Type'Val (7_878)),
      (Character_Type'Val (7_880), Character_Type'Val (7_880)),
      (Character_Type'Val (7_882), Character_Type'Val (7_882)),
      (Character_Type'Val (7_884), Character_Type'Val (7_884)),
      (Character_Type'Val (7_886), Character_Type'Val (7_886)),
      (Character_Type'Val (7_888), Character_Type'Val (7_888)),
      (Character_Type'Val (7_890), Character_Type'Val (7_890)),
      (Character_Type'Val (7_892), Character_Type'Val (7_892)),
      (Character_Type'Val (7_894), Character_Type'Val (7_894)),
      (Character_Type'Val (7_896), Character_Type'Val (7_896)),
      (Character_Type'Val (7_898), Character_Type'Val (7_898)),
      (Character_Type'Val (7_900), Character_Type'Val (7_900)),
      (Character_Type'Val (7_902), Character_Type'Val (7_902)),
      (Character_Type'Val (7_904), Character_Type'Val (7_904)),
      (Character_Type'Val (7_906), Character_Type'Val (7_906)),
      (Character_Type'Val (7_908), Character_Type'Val (7_908)),
      (Character_Type'Val (7_910), Character_Type'Val (7_910)),
      (Character_Type'Val (7_912), Character_Type'Val (7_912)),
      (Character_Type'Val (7_914), Character_Type'Val (7_914)),
      (Character_Type'Val (7_916), Character_Type'Val (7_916)),
      (Character_Type'Val (7_918), Character_Type'Val (7_918)),
      (Character_Type'Val (7_920), Character_Type'Val (7_920)),
      (Character_Type'Val (7_922), Character_Type'Val (7_922)),
      (Character_Type'Val (7_924), Character_Type'Val (7_924)),
      (Character_Type'Val (7_926), Character_Type'Val (7_926)),
      (Character_Type'Val (7_928), Character_Type'Val (7_928)),
      (Character_Type'Val (7_930), Character_Type'Val (7_930)),
      (Character_Type'Val (7_932), Character_Type'Val (7_932)),
      (Character_Type'Val (7_934), Character_Type'Val (7_934)),
      (Character_Type'Val (7_944), Character_Type'Val (7_951)),
      (Character_Type'Val (7_960), Character_Type'Val (7_965)),
      (Character_Type'Val (7_976), Character_Type'Val (7_983)),
      (Character_Type'Val (7_992), Character_Type'Val (7_999)),
      (Character_Type'Val (8_008), Character_Type'Val (8_013)),
      (Character_Type'Val (8_025), Character_Type'Val (8_025)),
      (Character_Type'Val (8_027), Character_Type'Val (8_027)),
      (Character_Type'Val (8_029), Character_Type'Val (8_029)),
      (Character_Type'Val (8_031), Character_Type'Val (8_031)),
      (Character_Type'Val (8_040), Character_Type'Val (8_047)),
      (Character_Type'Val (8_120), Character_Type'Val (8_123)),
      (Character_Type'Val (8_136), Character_Type'Val (8_139)),
      (Character_Type'Val (8_152), Character_Type'Val (8_155)),
      (Character_Type'Val (8_168), Character_Type'Val (8_172)),
      (Character_Type'Val (8_184), Character_Type'Val (8_187)),
      (Character_Type'Val (8_450), Character_Type'Val (8_450)),
      (Character_Type'Val (8_455), Character_Type'Val (8_455)),
      (Character_Type'Val (8_459), Character_Type'Val (8_461)),
      (Character_Type'Val (8_464), Character_Type'Val (8_466)),
      (Character_Type'Val (8_469), Character_Type'Val (8_469)),
      (Character_Type'Val (8_473), Character_Type'Val (8_477)),
      (Character_Type'Val (8_484), Character_Type'Val (8_484)),
      (Character_Type'Val (8_486), Character_Type'Val (8_486)),
      (Character_Type'Val (8_488), Character_Type'Val (8_488)),
      (Character_Type'Val (8_490), Character_Type'Val (8_493)),
      (Character_Type'Val (8_496), Character_Type'Val (8_499)),
      (Character_Type'Val (8_510), Character_Type'Val (8_511)),
      (Character_Type'Val (8_517), Character_Type'Val (8_517)),
      (Character_Type'Val (8_579), Character_Type'Val (8_579)),
      (Character_Type'Val (11_264), Character_Type'Val (11_310)),
      (Character_Type'Val (11_360), Character_Type'Val (11_360)),
      (Character_Type'Val (11_362), Character_Type'Val (11_364)),
      (Character_Type'Val (11_367), Character_Type'Val (11_367)),
      (Character_Type'Val (11_369), Character_Type'Val (11_369)),
      (Character_Type'Val (11_371), Character_Type'Val (11_371)),
      (Character_Type'Val (11_373), Character_Type'Val (11_376)),
      (Character_Type'Val (11_378), Character_Type'Val (11_378)),
      (Character_Type'Val (11_381), Character_Type'Val (11_381)),
      (Character_Type'Val (11_390), Character_Type'Val (11_392)),
      (Character_Type'Val (11_394), Character_Type'Val (11_394)),
      (Character_Type'Val (11_396), Character_Type'Val (11_396)),
      (Character_Type'Val (11_398), Character_Type'Val (11_398)),
      (Character_Type'Val (11_400), Character_Type'Val (11_400)),
      (Character_Type'Val (11_402), Character_Type'Val (11_402)),
      (Character_Type'Val (11_404), Character_Type'Val (11_404)),
      (Character_Type'Val (11_406), Character_Type'Val (11_406)),
      (Character_Type'Val (11_408), Character_Type'Val (11_408)),
      (Character_Type'Val (11_410), Character_Type'Val (11_410)),
      (Character_Type'Val (11_412), Character_Type'Val (11_412)),
      (Character_Type'Val (11_414), Character_Type'Val (11_414)),
      (Character_Type'Val (11_416), Character_Type'Val (11_416)),
      (Character_Type'Val (11_418), Character_Type'Val (11_418)),
      (Character_Type'Val (11_420), Character_Type'Val (11_420)),
      (Character_Type'Val (11_422), Character_Type'Val (11_422)),
      (Character_Type'Val (11_424), Character_Type'Val (11_424)),
      (Character_Type'Val (11_426), Character_Type'Val (11_426)),
      (Character_Type'Val (11_428), Character_Type'Val (11_428)),
      (Character_Type'Val (11_430), Character_Type'Val (11_430)),
      (Character_Type'Val (11_432), Character_Type'Val (11_432)),
      (Character_Type'Val (11_434), Character_Type'Val (11_434)),
      (Character_Type'Val (11_436), Character_Type'Val (11_436)),
      (Character_Type'Val (11_438), Character_Type'Val (11_438)),
      (Character_Type'Val (11_440), Character_Type'Val (11_440)),
      (Character_Type'Val (11_442), Character_Type'Val (11_442)),
      (Character_Type'Val (11_444), Character_Type'Val (11_444)),
      (Character_Type'Val (11_446), Character_Type'Val (11_446)),
      (Character_Type'Val (11_448), Character_Type'Val (11_448)),
      (Character_Type'Val (11_450), Character_Type'Val (11_450)),
      (Character_Type'Val (11_452), Character_Type'Val (11_452)),
      (Character_Type'Val (11_454), Character_Type'Val (11_454)),
      (Character_Type'Val (11_456), Character_Type'Val (11_456)),
      (Character_Type'Val (11_458), Character_Type'Val (11_458)),
      (Character_Type'Val (11_460), Character_Type'Val (11_460)),
      (Character_Type'Val (11_462), Character_Type'Val (11_462)),
      (Character_Type'Val (11_464), Character_Type'Val (11_464)),
      (Character_Type'Val (11_466), Character_Type'Val (11_466)),
      (Character_Type'Val (11_468), Character_Type'Val (11_468)),
      (Character_Type'Val (11_470), Character_Type'Val (11_470)),
      (Character_Type'Val (11_472), Character_Type'Val (11_472)),
      (Character_Type'Val (11_474), Character_Type'Val (11_474)),
      (Character_Type'Val (11_476), Character_Type'Val (11_476)),
      (Character_Type'Val (11_478), Character_Type'Val (11_478)),
      (Character_Type'Val (11_480), Character_Type'Val (11_480)),
      (Character_Type'Val (11_482), Character_Type'Val (11_482)),
      (Character_Type'Val (11_484), Character_Type'Val (11_484)),
      (Character_Type'Val (11_486), Character_Type'Val (11_486)),
      (Character_Type'Val (11_488), Character_Type'Val (11_488)),
      (Character_Type'Val (11_490), Character_Type'Val (11_490)),
      (Character_Type'Val (11_499), Character_Type'Val (11_499)),
      (Character_Type'Val (11_501), Character_Type'Val (11_501)),
      (Character_Type'Val (42_560), Character_Type'Val (42_560)),
      (Character_Type'Val (42_562), Character_Type'Val (42_562)),
      (Character_Type'Val (42_564), Character_Type'Val (42_564)),
      (Character_Type'Val (42_566), Character_Type'Val (42_566)),
      (Character_Type'Val (42_568), Character_Type'Val (42_568)),
      (Character_Type'Val (42_570), Character_Type'Val (42_570)),
      (Character_Type'Val (42_572), Character_Type'Val (42_572)),
      (Character_Type'Val (42_574), Character_Type'Val (42_574)),
      (Character_Type'Val (42_576), Character_Type'Val (42_576)),
      (Character_Type'Val (42_578), Character_Type'Val (42_578)),
      (Character_Type'Val (42_580), Character_Type'Val (42_580)),
      (Character_Type'Val (42_582), Character_Type'Val (42_582)),
      (Character_Type'Val (42_584), Character_Type'Val (42_584)),
      (Character_Type'Val (42_586), Character_Type'Val (42_586)),
      (Character_Type'Val (42_588), Character_Type'Val (42_588)),
      (Character_Type'Val (42_590), Character_Type'Val (42_590)),
      (Character_Type'Val (42_594), Character_Type'Val (42_594)),
      (Character_Type'Val (42_596), Character_Type'Val (42_596)),
      (Character_Type'Val (42_598), Character_Type'Val (42_598)),
      (Character_Type'Val (42_600), Character_Type'Val (42_600)),
      (Character_Type'Val (42_602), Character_Type'Val (42_602)),
      (Character_Type'Val (42_604), Character_Type'Val (42_604)),
      (Character_Type'Val (42_624), Character_Type'Val (42_624)),
      (Character_Type'Val (42_626), Character_Type'Val (42_626)),
      (Character_Type'Val (42_628), Character_Type'Val (42_628)),
      (Character_Type'Val (42_630), Character_Type'Val (42_630)),
      (Character_Type'Val (42_632), Character_Type'Val (42_632)),
      (Character_Type'Val (42_634), Character_Type'Val (42_634)),
      (Character_Type'Val (42_636), Character_Type'Val (42_636)),
      (Character_Type'Val (42_638), Character_Type'Val (42_638)),
      (Character_Type'Val (42_640), Character_Type'Val (42_640)),
      (Character_Type'Val (42_642), Character_Type'Val (42_642)),
      (Character_Type'Val (42_644), Character_Type'Val (42_644)),
      (Character_Type'Val (42_646), Character_Type'Val (42_646)),
      (Character_Type'Val (42_786), Character_Type'Val (42_786)),
      (Character_Type'Val (42_788), Character_Type'Val (42_788)),
      (Character_Type'Val (42_790), Character_Type'Val (42_790)),
      (Character_Type'Val (42_792), Character_Type'Val (42_792)),
      (Character_Type'Val (42_794), Character_Type'Val (42_794)),
      (Character_Type'Val (42_796), Character_Type'Val (42_796)),
      (Character_Type'Val (42_798), Character_Type'Val (42_798)),
      (Character_Type'Val (42_802), Character_Type'Val (42_802)),
      (Character_Type'Val (42_804), Character_Type'Val (42_804)),
      (Character_Type'Val (42_806), Character_Type'Val (42_806)),
      (Character_Type'Val (42_808), Character_Type'Val (42_808)),
      (Character_Type'Val (42_810), Character_Type'Val (42_810)),
      (Character_Type'Val (42_812), Character_Type'Val (42_812)),
      (Character_Type'Val (42_814), Character_Type'Val (42_814)),
      (Character_Type'Val (42_816), Character_Type'Val (42_816)),
      (Character_Type'Val (42_818), Character_Type'Val (42_818)),
      (Character_Type'Val (42_820), Character_Type'Val (42_820)),
      (Character_Type'Val (42_822), Character_Type'Val (42_822)),
      (Character_Type'Val (42_824), Character_Type'Val (42_824)),
      (Character_Type'Val (42_826), Character_Type'Val (42_826)),
      (Character_Type'Val (42_828), Character_Type'Val (42_828)),
      (Character_Type'Val (42_830), Character_Type'Val (42_830)),
      (Character_Type'Val (42_832), Character_Type'Val (42_832)),
      (Character_Type'Val (42_834), Character_Type'Val (42_834)),
      (Character_Type'Val (42_836), Character_Type'Val (42_836)),
      (Character_Type'Val (42_838), Character_Type'Val (42_838)),
      (Character_Type'Val (42_840), Character_Type'Val (42_840)),
      (Character_Type'Val (42_842), Character_Type'Val (42_842)),
      (Character_Type'Val (42_844), Character_Type'Val (42_844)),
      (Character_Type'Val (42_846), Character_Type'Val (42_846)),
      (Character_Type'Val (42_848), Character_Type'Val (42_848)),
      (Character_Type'Val (42_850), Character_Type'Val (42_850)),
      (Character_Type'Val (42_852), Character_Type'Val (42_852)),
      (Character_Type'Val (42_854), Character_Type'Val (42_854)),
      (Character_Type'Val (42_856), Character_Type'Val (42_856)),
      (Character_Type'Val (42_858), Character_Type'Val (42_858)),
      (Character_Type'Val (42_860), Character_Type'Val (42_860)),
      (Character_Type'Val (42_862), Character_Type'Val (42_862)),
      (Character_Type'Val (42_873), Character_Type'Val (42_873)),
      (Character_Type'Val (42_875), Character_Type'Val (42_875)),
      (Character_Type'Val (42_877), Character_Type'Val (42_878)),
      (Character_Type'Val (42_880), Character_Type'Val (42_880)),
      (Character_Type'Val (42_882), Character_Type'Val (42_882)),
      (Character_Type'Val (42_884), Character_Type'Val (42_884)),
      (Character_Type'Val (42_886), Character_Type'Val (42_886)),
      (Character_Type'Val (42_891), Character_Type'Val (42_891)),
      (Character_Type'Val (65_313), Character_Type'Val (65_338)),
      (Character_Type'Val (66_560), Character_Type'Val (66_599)),
      (Character_Type'Val (119_808), Character_Type'Val (119_833)),
      (Character_Type'Val (119_860), Character_Type'Val (119_885)),
      (Character_Type'Val (119_912), Character_Type'Val (119_937)),
      (Character_Type'Val (119_964), Character_Type'Val (119_964)),
      (Character_Type'Val (119_966), Character_Type'Val (119_967)),
      (Character_Type'Val (119_970), Character_Type'Val (119_970)),
      (Character_Type'Val (119_973), Character_Type'Val (119_974)),
      (Character_Type'Val (119_977), Character_Type'Val (119_980)),
      (Character_Type'Val (119_982), Character_Type'Val (119_989)),
      (Character_Type'Val (120_016), Character_Type'Val (120_041)),
      (Character_Type'Val (120_068), Character_Type'Val (120_069)),
      (Character_Type'Val (120_071), Character_Type'Val (120_074)),
      (Character_Type'Val (120_077), Character_Type'Val (120_084)),
      (Character_Type'Val (120_086), Character_Type'Val (120_092)),
      (Character_Type'Val (120_120), Character_Type'Val (120_121)),
      (Character_Type'Val (120_123), Character_Type'Val (120_126)),
      (Character_Type'Val (120_128), Character_Type'Val (120_132)),
      (Character_Type'Val (120_134), Character_Type'Val (120_134)),
      (Character_Type'Val (120_138), Character_Type'Val (120_144)),
      (Character_Type'Val (120_172), Character_Type'Val (120_197)),
      (Character_Type'Val (120_224), Character_Type'Val (120_249)),
      (Character_Type'Val (120_276), Character_Type'Val (120_301)),
      (Character_Type'Val (120_328), Character_Type'Val (120_353)),
      (Character_Type'Val (120_380), Character_Type'Val (120_405)),
      (Character_Type'Val (120_432), Character_Type'Val (120_457)),
      (Character_Type'Val (120_488), Character_Type'Val (120_512)),
      (Character_Type'Val (120_546), Character_Type'Val (120_570)),
      (Character_Type'Val (120_604), Character_Type'Val (120_628)),
      (Character_Type'Val (120_662), Character_Type'Val (120_686)),
      (Character_Type'Val (120_720), Character_Type'Val (120_744)),
      (Character_Type'Val (120_778), Character_Type'Val (120_778)));
   Ranges_1 : constant Character_Range_Array :=
     ((Character_Type'Val (170), Character_Type'Val (170)),
      (Character_Type'Val (181), Character_Type'Val (181)),
      (Character_Type'Val (186), Character_Type'Val (186)),
      (Character_Type'Val (223), Character_Type'Val (246)),
      (Character_Type'Val (248), Character_Type'Val (255)),
      (Character_Type'Val (257), Character_Type'Val (257)),
      (Character_Type'Val (259), Character_Type'Val (259)),
      (Character_Type'Val (261), Character_Type'Val (261)),
      (Character_Type'Val (263), Character_Type'Val (263)),
      (Character_Type'Val (265), Character_Type'Val (265)),
      (Character_Type'Val (267), Character_Type'Val (267)),
      (Character_Type'Val (269), Character_Type'Val (269)),
      (Character_Type'Val (271), Character_Type'Val (271)),
      (Character_Type'Val (273), Character_Type'Val (273)),
      (Character_Type'Val (275), Character_Type'Val (275)),
      (Character_Type'Val (277), Character_Type'Val (277)),
      (Character_Type'Val (279), Character_Type'Val (279)),
      (Character_Type'Val (281), Character_Type'Val (281)),
      (Character_Type'Val (283), Character_Type'Val (283)),
      (Character_Type'Val (285), Character_Type'Val (285)),
      (Character_Type'Val (287), Character_Type'Val (287)),
      (Character_Type'Val (289), Character_Type'Val (289)),
      (Character_Type'Val (291), Character_Type'Val (291)),
      (Character_Type'Val (293), Character_Type'Val (293)),
      (Character_Type'Val (295), Character_Type'Val (295)),
      (Character_Type'Val (297), Character_Type'Val (297)),
      (Character_Type'Val (299), Character_Type'Val (299)),
      (Character_Type'Val (301), Character_Type'Val (301)),
      (Character_Type'Val (303), Character_Type'Val (303)),
      (Character_Type'Val (305), Character_Type'Val (305)),
      (Character_Type'Val (307), Character_Type'Val (307)),
      (Character_Type'Val (309), Character_Type'Val (309)),
      (Character_Type'Val (311), Character_Type'Val (312)),
      (Character_Type'Val (314), Character_Type'Val (314)),
      (Character_Type'Val (316), Character_Type'Val (316)),
      (Character_Type'Val (318), Character_Type'Val (318)),
      (Character_Type'Val (320), Character_Type'Val (320)),
      (Character_Type'Val (322), Character_Type'Val (322)),
      (Character_Type'Val (324), Character_Type'Val (324)),
      (Character_Type'Val (326), Character_Type'Val (326)),
      (Character_Type'Val (328), Character_Type'Val (329)),
      (Character_Type'Val (331), Character_Type'Val (331)),
      (Character_Type'Val (333), Character_Type'Val (333)),
      (Character_Type'Val (335), Character_Type'Val (335)),
      (Character_Type'Val (337), Character_Type'Val (337)),
      (Character_Type'Val (339), Character_Type'Val (339)),
      (Character_Type'Val (341), Character_Type'Val (341)),
      (Character_Type'Val (343), Character_Type'Val (343)),
      (Character_Type'Val (345), Character_Type'Val (345)),
      (Character_Type'Val (347), Character_Type'Val (347)),
      (Character_Type'Val (349), Character_Type'Val (349)),
      (Character_Type'Val (351), Character_Type'Val (351)),
      (Character_Type'Val (353), Character_Type'Val (353)),
      (Character_Type'Val (355), Character_Type'Val (355)),
      (Character_Type'Val (357), Character_Type'Val (357)),
      (Character_Type'Val (359), Character_Type'Val (359)),
      (Character_Type'Val (361), Character_Type'Val (361)),
      (Character_Type'Val (363), Character_Type'Val (363)),
      (Character_Type'Val (365), Character_Type'Val (365)),
      (Character_Type'Val (367), Character_Type'Val (367)),
      (Character_Type'Val (369), Character_Type'Val (369)),
      (Character_Type'Val (371), Character_Type'Val (371)),
      (Character_Type'Val (373), Character_Type'Val (373)),
      (Character_Type'Val (375), Character_Type'Val (375)),
      (Character_Type'Val (378), Character_Type'Val (378)),
      (Character_Type'Val (380), Character_Type'Val (380)),
      (Character_Type'Val (382), Character_Type'Val (384)),
      (Character_Type'Val (387), Character_Type'Val (387)),
      (Character_Type'Val (389), Character_Type'Val (389)),
      (Character_Type'Val (392), Character_Type'Val (392)),
      (Character_Type'Val (396), Character_Type'Val (397)),
      (Character_Type'Val (402), Character_Type'Val (402)),
      (Character_Type'Val (405), Character_Type'Val (405)),
      (Character_Type'Val (409), Character_Type'Val (411)),
      (Character_Type'Val (414), Character_Type'Val (414)),
      (Character_Type'Val (417), Character_Type'Val (417)),
      (Character_Type'Val (419), Character_Type'Val (419)),
      (Character_Type'Val (421), Character_Type'Val (421)),
      (Character_Type'Val (424), Character_Type'Val (424)),
      (Character_Type'Val (426), Character_Type'Val (427)),
      (Character_Type'Val (429), Character_Type'Val (429)),
      (Character_Type'Val (432), Character_Type'Val (432)),
      (Character_Type'Val (436), Character_Type'Val (436)),
      (Character_Type'Val (438), Character_Type'Val (438)),
      (Character_Type'Val (441), Character_Type'Val (442)),
      (Character_Type'Val (445), Character_Type'Val (447)),
      (Character_Type'Val (454), Character_Type'Val (454)),
      (Character_Type'Val (457), Character_Type'Val (457)),
      (Character_Type'Val (460), Character_Type'Val (460)),
      (Character_Type'Val (462), Character_Type'Val (462)),
      (Character_Type'Val (464), Character_Type'Val (464)),
      (Character_Type'Val (466), Character_Type'Val (466)),
      (Character_Type'Val (468), Character_Type'Val (468)),
      (Character_Type'Val (470), Character_Type'Val (470)),
      (Character_Type'Val (472), Character_Type'Val (472)),
      (Character_Type'Val (474), Character_Type'Val (474)),
      (Character_Type'Val (476), Character_Type'Val (477)),
      (Character_Type'Val (479), Character_Type'Val (479)),
      (Character_Type'Val (481), Character_Type'Val (481)),
      (Character_Type'Val (483), Character_Type'Val (483)),
      (Character_Type'Val (485), Character_Type'Val (485)),
      (Character_Type'Val (487), Character_Type'Val (487)),
      (Character_Type'Val (489), Character_Type'Val (489)),
      (Character_Type'Val (491), Character_Type'Val (491)),
      (Character_Type'Val (493), Character_Type'Val (493)),
      (Character_Type'Val (495), Character_Type'Val (496)),
      (Character_Type'Val (499), Character_Type'Val (499)),
      (Character_Type'Val (501), Character_Type'Val (501)),
      (Character_Type'Val (505), Character_Type'Val (505)),
      (Character_Type'Val (507), Character_Type'Val (507)),
      (Character_Type'Val (509), Character_Type'Val (509)),
      (Character_Type'Val (511), Character_Type'Val (511)),
      (Character_Type'Val (513), Character_Type'Val (513)),
      (Character_Type'Val (515), Character_Type'Val (515)),
      (Character_Type'Val (517), Character_Type'Val (517)),
      (Character_Type'Val (519), Character_Type'Val (519)),
      (Character_Type'Val (521), Character_Type'Val (521)),
      (Character_Type'Val (523), Character_Type'Val (523)),
      (Character_Type'Val (525), Character_Type'Val (525)),
      (Character_Type'Val (527), Character_Type'Val (527)),
      (Character_Type'Val (529), Character_Type'Val (529)),
      (Character_Type'Val (531), Character_Type'Val (531)),
      (Character_Type'Val (533), Character_Type'Val (533)),
      (Character_Type'Val (535), Character_Type'Val (535)),
      (Character_Type'Val (537), Character_Type'Val (537)),
      (Character_Type'Val (539), Character_Type'Val (539)),
      (Character_Type'Val (541), Character_Type'Val (541)),
      (Character_Type'Val (543), Character_Type'Val (543)),
      (Character_Type'Val (545), Character_Type'Val (545)),
      (Character_Type'Val (547), Character_Type'Val (547)),
      (Character_Type'Val (549), Character_Type'Val (549)),
      (Character_Type'Val (551), Character_Type'Val (551)),
      (Character_Type'Val (553), Character_Type'Val (553)),
      (Character_Type'Val (555), Character_Type'Val (555)),
      (Character_Type'Val (557), Character_Type'Val (557)),
      (Character_Type'Val (559), Character_Type'Val (559)),
      (Character_Type'Val (561), Character_Type'Val (561)),
      (Character_Type'Val (563), Character_Type'Val (569)),
      (Character_Type'Val (572), Character_Type'Val (572)),
      (Character_Type'Val (575), Character_Type'Val (576)),
      (Character_Type'Val (578), Character_Type'Val (578)),
      (Character_Type'Val (583), Character_Type'Val (583)),
      (Character_Type'Val (585), Character_Type'Val (585)),
      (Character_Type'Val (587), Character_Type'Val (587)),
      (Character_Type'Val (589), Character_Type'Val (589)),
      (Character_Type'Val (591), Character_Type'Val (659)),
      (Character_Type'Val (661), Character_Type'Val (687)),
      (Character_Type'Val (881), Character_Type'Val (881)),
      (Character_Type'Val (883), Character_Type'Val (883)),
      (Character_Type'Val (887), Character_Type'Val (887)),
      (Character_Type'Val (891), Character_Type'Val (893)),
      (Character_Type'Val (912), Character_Type'Val (912)),
      (Character_Type'Val (940), Character_Type'Val (974)),
      (Character_Type'Val (976), Character_Type'Val (977)),
      (Character_Type'Val (981), Character_Type'Val (983)),
      (Character_Type'Val (985), Character_Type'Val (985)),
      (Character_Type'Val (987), Character_Type'Val (987)),
      (Character_Type'Val (989), Character_Type'Val (989)),
      (Character_Type'Val (991), Character_Type'Val (991)),
      (Character_Type'Val (993), Character_Type'Val (993)),
      (Character_Type'Val (995), Character_Type'Val (995)),
      (Character_Type'Val (997), Character_Type'Val (997)),
      (Character_Type'Val (999), Character_Type'Val (999)),
      (Character_Type'Val (1_001), Character_Type'Val (1_001)),
      (Character_Type'Val (1_003), Character_Type'Val (1_003)),
      (Character_Type'Val (1_005), Character_Type'Val (1_005)),
      (Character_Type'Val (1_007), Character_Type'Val (1_011)),
      (Character_Type'Val (1_013), Character_Type'Val (1_013)),
      (Character_Type'Val (1_016), Character_Type'Val (1_016)),
      (Character_Type'Val (1_019), Character_Type'Val (1_020)),
      (Character_Type'Val (1_072), Character_Type'Val (1_119)),
      (Character_Type'Val (1_121), Character_Type'Val (1_121)),
      (Character_Type'Val (1_123), Character_Type'Val (1_123)),
      (Character_Type'Val (1_125), Character_Type'Val (1_125)),
      (Character_Type'Val (1_127), Character_Type'Val (1_127)),
      (Character_Type'Val (1_129), Character_Type'Val (1_129)),
      (Character_Type'Val (1_131), Character_Type'Val (1_131)),
      (Character_Type'Val (1_133), Character_Type'Val (1_133)),
      (Character_Type'Val (1_135), Character_Type'Val (1_135)),
      (Character_Type'Val (1_137), Character_Type'Val (1_137)),
      (Character_Type'Val (1_139), Character_Type'Val (1_139)),
      (Character_Type'Val (1_141), Character_Type'Val (1_141)),
      (Character_Type'Val (1_143), Character_Type'Val (1_143)),
      (Character_Type'Val (1_145), Character_Type'Val (1_145)),
      (Character_Type'Val (1_147), Character_Type'Val (1_147)),
      (Character_Type'Val (1_149), Character_Type'Val (1_149)),
      (Character_Type'Val (1_151), Character_Type'Val (1_151)),
      (Character_Type'Val (1_153), Character_Type'Val (1_153)),
      (Character_Type'Val (1_163), Character_Type'Val (1_163)),
      (Character_Type'Val (1_165), Character_Type'Val (1_165)),
      (Character_Type'Val (1_167), Character_Type'Val (1_167)),
      (Character_Type'Val (1_169), Character_Type'Val (1_169)),
      (Character_Type'Val (1_171), Character_Type'Val (1_171)),
      (Character_Type'Val (1_173), Character_Type'Val (1_173)),
      (Character_Type'Val (1_175), Character_Type'Val (1_175)),
      (Character_Type'Val (1_177), Character_Type'Val (1_177)),
      (Character_Type'Val (1_179), Character_Type'Val (1_179)),
      (Character_Type'Val (1_181), Character_Type'Val (1_181)),
      (Character_Type'Val (1_183), Character_Type'Val (1_183)),
      (Character_Type'Val (1_185), Character_Type'Val (1_185)),
      (Character_Type'Val (1_187), Character_Type'Val (1_187)),
      (Character_Type'Val (1_189), Character_Type'Val (1_189)),
      (Character_Type'Val (1_191), Character_Type'Val (1_191)),
      (Character_Type'Val (1_193), Character_Type'Val (1_193)),
      (Character_Type'Val (1_195), Character_Type'Val (1_195)),
      (Character_Type'Val (1_197), Character_Type'Val (1_197)),
      (Character_Type'Val (1_199), Character_Type'Val (1_199)),
      (Character_Type'Val (1_201), Character_Type'Val (1_201)),
      (Character_Type'Val (1_203), Character_Type'Val (1_203)),
      (Character_Type'Val (1_205), Character_Type'Val (1_205)),
      (Character_Type'Val (1_207), Character_Type'Val (1_207)),
      (Character_Type'Val (1_209), Character_Type'Val (1_209)),
      (Character_Type'Val (1_211), Character_Type'Val (1_211)),
      (Character_Type'Val (1_213), Character_Type'Val (1_213)),
      (Character_Type'Val (1_215), Character_Type'Val (1_215)),
      (Character_Type'Val (1_218), Character_Type'Val (1_218)),
      (Character_Type'Val (1_220), Character_Type'Val (1_220)),
      (Character_Type'Val (1_222), Character_Type'Val (1_222)),
      (Character_Type'Val (1_224), Character_Type'Val (1_224)),
      (Character_Type'Val (1_226), Character_Type'Val (1_226)),
      (Character_Type'Val (1_228), Character_Type'Val (1_228)),
      (Character_Type'Val (1_230), Character_Type'Val (1_231)),
      (Character_Type'Val (1_233), Character_Type'Val (1_233)),
      (Character_Type'Val (1_235), Character_Type'Val (1_235)),
      (Character_Type'Val (1_237), Character_Type'Val (1_237)),
      (Character_Type'Val (1_239), Character_Type'Val (1_239)),
      (Character_Type'Val (1_241), Character_Type'Val (1_241)),
      (Character_Type'Val (1_243), Character_Type'Val (1_243)),
      (Character_Type'Val (1_245), Character_Type'Val (1_245)),
      (Character_Type'Val (1_247), Character_Type'Val (1_247)),
      (Character_Type'Val (1_249), Character_Type'Val (1_249)),
      (Character_Type'Val (1_251), Character_Type'Val (1_251)),
      (Character_Type'Val (1_253), Character_Type'Val (1_253)),
      (Character_Type'Val (1_255), Character_Type'Val (1_255)),
      (Character_Type'Val (1_257), Character_Type'Val (1_257)),
      (Character_Type'Val (1_259), Character_Type'Val (1_259)),
      (Character_Type'Val (1_261), Character_Type'Val (1_261)),
      (Character_Type'Val (1_263), Character_Type'Val (1_263)),
      (Character_Type'Val (1_265), Character_Type'Val (1_265)),
      (Character_Type'Val (1_267), Character_Type'Val (1_267)),
      (Character_Type'Val (1_269), Character_Type'Val (1_269)),
      (Character_Type'Val (1_271), Character_Type'Val (1_271)),
      (Character_Type'Val (1_273), Character_Type'Val (1_273)),
      (Character_Type'Val (1_275), Character_Type'Val (1_275)),
      (Character_Type'Val (1_277), Character_Type'Val (1_277)),
      (Character_Type'Val (1_279), Character_Type'Val (1_279)),
      (Character_Type'Val (1_281), Character_Type'Val (1_281)),
      (Character_Type'Val (1_283), Character_Type'Val (1_283)),
      (Character_Type'Val (1_285), Character_Type'Val (1_285)),
      (Character_Type'Val (1_287), Character_Type'Val (1_287)),
      (Character_Type'Val (1_289), Character_Type'Val (1_289)),
      (Character_Type'Val (1_291), Character_Type'Val (1_291)),
      (Character_Type'Val (1_293), Character_Type'Val (1_293)),
      (Character_Type'Val (1_295), Character_Type'Val (1_295)),
      (Character_Type'Val (1_297), Character_Type'Val (1_297)),
      (Character_Type'Val (1_299), Character_Type'Val (1_299)),
      (Character_Type'Val (1_301), Character_Type'Val (1_301)),
      (Character_Type'Val (1_303), Character_Type'Val (1_303)),
      (Character_Type'Val (1_305), Character_Type'Val (1_305)),
      (Character_Type'Val (1_307), Character_Type'Val (1_307)),
      (Character_Type'Val (1_309), Character_Type'Val (1_309)),
      (Character_Type'Val (1_311), Character_Type'Val (1_311)),
      (Character_Type'Val (1_313), Character_Type'Val (1_313)),
      (Character_Type'Val (1_315), Character_Type'Val (1_315)),
      (Character_Type'Val (1_317), Character_Type'Val (1_317)),
      (Character_Type'Val (1_377), Character_Type'Val (1_415)),
      (Character_Type'Val (7_424), Character_Type'Val (7_467)),
      (Character_Type'Val (7_522), Character_Type'Val (7_543)),
      (Character_Type'Val (7_545), Character_Type'Val (7_578)),
      (Character_Type'Val (7_681), Character_Type'Val (7_681)),
      (Character_Type'Val (7_683), Character_Type'Val (7_683)),
      (Character_Type'Val (7_685), Character_Type'Val (7_685)),
      (Character_Type'Val (7_687), Character_Type'Val (7_687)),
      (Character_Type'Val (7_689), Character_Type'Val (7_689)),
      (Character_Type'Val (7_691), Character_Type'Val (7_691)),
      (Character_Type'Val (7_693), Character_Type'Val (7_693)),
      (Character_Type'Val (7_695), Character_Type'Val (7_695)),
      (Character_Type'Val (7_697), Character_Type'Val (7_697)),
      (Character_Type'Val (7_699), Character_Type'Val (7_699)),
      (Character_Type'Val (7_701), Character_Type'Val (7_701)),
      (Character_Type'Val (7_703), Character_Type'Val (7_703)),
      (Character_Type'Val (7_705), Character_Type'Val (7_705)),
      (Character_Type'Val (7_707), Character_Type'Val (7_707)),
      (Character_Type'Val (7_709), Character_Type'Val (7_709)),
      (Character_Type'Val (7_711), Character_Type'Val (7_711)),
      (Character_Type'Val (7_713), Character_Type'Val (7_713)),
      (Character_Type'Val (7_715), Character_Type'Val (7_715)),
      (Character_Type'Val (7_717), Character_Type'Val (7_717)),
      (Character_Type'Val (7_719), Character_Type'Val (7_719)),
      (Character_Type'Val (7_721), Character_Type'Val (7_721)),
      (Character_Type'Val (7_723), Character_Type'Val (7_723)),
      (Character_Type'Val (7_725), Character_Type'Val (7_725)),
      (Character_Type'Val (7_727), Character_Type'Val (7_727)),
      (Character_Type'Val (7_729), Character_Type'Val (7_729)),
      (Character_Type'Val (7_731), Character_Type'Val (7_731)),
      (Character_Type'Val (7_733), Character_Type'Val (7_733)),
      (Character_Type'Val (7_735), Character_Type'Val (7_735)),
      (Character_Type'Val (7_737), Character_Type'Val (7_737)),
      (Character_Type'Val (7_739), Character_Type'Val (7_739)),
      (Character_Type'Val (7_741), Character_Type'Val (7_741)),
      (Character_Type'Val (7_743), Character_Type'Val (7_743)),
      (Character_Type'Val (7_745), Character_Type'Val (7_745)),
      (Character_Type'Val (7_747), Character_Type'Val (7_747)),
      (Character_Type'Val (7_749), Character_Type'Val (7_749)),
      (Character_Type'Val (7_751), Character_Type'Val (7_751)),
      (Character_Type'Val (7_753), Character_Type'Val (7_753)),
      (Character_Type'Val (7_755), Character_Type'Val (7_755)),
      (Character_Type'Val (7_757), Character_Type'Val (7_757)),
      (Character_Type'Val (7_759), Character_Type'Val (7_759)),
      (Character_Type'Val (7_761), Character_Type'Val (7_761)),
      (Character_Type'Val (7_763), Character_Type'Val (7_763)),
      (Character_Type'Val (7_765), Character_Type'Val (7_765)),
      (Character_Type'Val (7_767), Character_Type'Val (7_767)),
      (Character_Type'Val (7_769), Character_Type'Val (7_769)),
      (Character_Type'Val (7_771), Character_Type'Val (7_771)),
      (Character_Type'Val (7_773), Character_Type'Val (7_773)),
      (Character_Type'Val (7_775), Character_Type'Val (7_775)),
      (Character_Type'Val (7_777), Character_Type'Val (7_777)),
      (Character_Type'Val (7_779), Character_Type'Val (7_779)),
      (Character_Type'Val (7_781), Character_Type'Val (7_781)),
      (Character_Type'Val (7_783), Character_Type'Val (7_783)),
      (Character_Type'Val (7_785), Character_Type'Val (7_785)),
      (Character_Type'Val (7_787), Character_Type'Val (7_787)),
      (Character_Type'Val (7_789), Character_Type'Val (7_789)),
      (Character_Type'Val (7_791), Character_Type'Val (7_791)),
      (Character_Type'Val (7_793), Character_Type'Val (7_793)),
      (Character_Type'Val (7_795), Character_Type'Val (7_795)),
      (Character_Type'Val (7_797), Character_Type'Val (7_797)),
      (Character_Type'Val (7_799), Character_Type'Val (7_799)),
      (Character_Type'Val (7_801), Character_Type'Val (7_801)),
      (Character_Type'Val (7_803), Character_Type'Val (7_803)),
      (Character_Type'Val (7_805), Character_Type'Val (7_805)),
      (Character_Type'Val (7_807), Character_Type'Val (7_807)),
      (Character_Type'Val (7_809), Character_Type'Val (7_809)),
      (Character_Type'Val (7_811), Character_Type'Val (7_811)),
      (Character_Type'Val (7_813), Character_Type'Val (7_813)),
      (Character_Type'Val (7_815), Character_Type'Val (7_815)),
      (Character_Type'Val (7_817), Character_Type'Val (7_817)),
      (Character_Type'Val (7_819), Character_Type'Val (7_819)),
      (Character_Type'Val (7_821), Character_Type'Val (7_821)),
      (Character_Type'Val (7_823), Character_Type'Val (7_823)),
      (Character_Type'Val (7_825), Character_Type'Val (7_825)),
      (Character_Type'Val (7_827), Character_Type'Val (7_827)),
      (Character_Type'Val (7_829), Character_Type'Val (7_837)),
      (Character_Type'Val (7_839), Character_Type'Val (7_839)),
      (Character_Type'Val (7_841), Character_Type'Val (7_841)),
      (Character_Type'Val (7_843), Character_Type'Val (7_843)),
      (Character_Type'Val (7_845), Character_Type'Val (7_845)),
      (Character_Type'Val (7_847), Character_Type'Val (7_847)),
      (Character_Type'Val (7_849), Character_Type'Val (7_849)),
      (Character_Type'Val (7_851), Character_Type'Val (7_851)),
      (Character_Type'Val (7_853), Character_Type'Val (7_853)),
      (Character_Type'Val (7_855), Character_Type'Val (7_855)),
      (Character_Type'Val (7_857), Character_Type'Val (7_857)),
      (Character_Type'Val (7_859), Character_Type'Val (7_859)),
      (Character_Type'Val (7_861), Character_Type'Val (7_861)),
      (Character_Type'Val (7_863), Character_Type'Val (7_863)),
      (Character_Type'Val (7_865), Character_Type'Val (7_865)),
      (Character_Type'Val (7_867), Character_Type'Val (7_867)),
      (Character_Type'Val (7_869), Character_Type'Val (7_869)),
      (Character_Type'Val (7_871), Character_Type'Val (7_871)),
      (Character_Type'Val (7_873), Character_Type'Val (7_873)),
      (Character_Type'Val (7_875), Character_Type'Val (7_875)),
      (Character_Type'Val (7_877), Character_Type'Val (7_877)),
      (Character_Type'Val (7_879), Character_Type'Val (7_879)),
      (Character_Type'Val (7_881), Character_Type'Val (7_881)),
      (Character_Type'Val (7_883), Character_Type'Val (7_883)),
      (Character_Type'Val (7_885), Character_Type'Val (7_885)),
      (Character_Type'Val (7_887), Character_Type'Val (7_887)),
      (Character_Type'Val (7_889), Character_Type'Val (7_889)),
      (Character_Type'Val (7_891), Character_Type'Val (7_891)),
      (Character_Type'Val (7_893), Character_Type'Val (7_893)),
      (Character_Type'Val (7_895), Character_Type'Val (7_895)),
      (Character_Type'Val (7_897), Character_Type'Val (7_897)),
      (Character_Type'Val (7_899), Character_Type'Val (7_899)),
      (Character_Type'Val (7_901), Character_Type'Val (7_901)),
      (Character_Type'Val (7_903), Character_Type'Val (7_903)),
      (Character_Type'Val (7_905), Character_Type'Val (7_905)),
      (Character_Type'Val (7_907), Character_Type'Val (7_907)),
      (Character_Type'Val (7_909), Character_Type'Val (7_909)),
      (Character_Type'Val (7_911), Character_Type'Val (7_911)),
      (Character_Type'Val (7_913), Character_Type'Val (7_913)),
      (Character_Type'Val (7_915), Character_Type'Val (7_915)),
      (Character_Type'Val (7_917), Character_Type'Val (7_917)),
      (Character_Type'Val (7_919), Character_Type'Val (7_919)),
      (Character_Type'Val (7_921), Character_Type'Val (7_921)),
      (Character_Type'Val (7_923), Character_Type'Val (7_923)),
      (Character_Type'Val (7_925), Character_Type'Val (7_925)),
      (Character_Type'Val (7_927), Character_Type'Val (7_927)),
      (Character_Type'Val (7_929), Character_Type'Val (7_929)),
      (Character_Type'Val (7_931), Character_Type'Val (7_931)),
      (Character_Type'Val (7_933), Character_Type'Val (7_933)),
      (Character_Type'Val (7_935), Character_Type'Val (7_943)),
      (Character_Type'Val (7_952), Character_Type'Val (7_957)),
      (Character_Type'Val (7_968), Character_Type'Val (7_975)),
      (Character_Type'Val (7_984), Character_Type'Val (7_991)),
      (Character_Type'Val (8_000), Character_Type'Val (8_005)),
      (Character_Type'Val (8_016), Character_Type'Val (8_023)),
      (Character_Type'Val (8_032), Character_Type'Val (8_039)),
      (Character_Type'Val (8_048), Character_Type'Val (8_061)),
      (Character_Type'Val (8_064), Character_Type'Val (8_071)),
      (Character_Type'Val (8_080), Character_Type'Val (8_087)),
      (Character_Type'Val (8_096), Character_Type'Val (8_103)),
      (Character_Type'Val (8_112), Character_Type'Val (8_116)),
      (Character_Type'Val (8_118), Character_Type'Val (8_119)),
      (Character_Type'Val (8_126), Character_Type'Val (8_126)),
      (Character_Type'Val (8_130), Character_Type'Val (8_132)),
      (Character_Type'Val (8_134), Character_Type'Val (8_135)),
      (Character_Type'Val (8_144), Character_Type'Val (8_147)),
      (Character_Type'Val (8_150), Character_Type'Val (8_151)),
      (Character_Type'Val (8_160), Character_Type'Val (8_167)),
      (Character_Type'Val (8_178), Character_Type'Val (8_180)),
      (Character_Type'Val (8_182), Character_Type'Val (8_183)),
      (Character_Type'Val (8_458), Character_Type'Val (8_458)),
      (Character_Type'Val (8_462), Character_Type'Val (8_463)),
      (Character_Type'Val (8_467), Character_Type'Val (8_467)),
      (Character_Type'Val (8_495), Character_Type'Val (8_495)),
      (Character_Type'Val (8_500), Character_Type'Val (8_500)),
      (Character_Type'Val (8_505), Character_Type'Val (8_505)),
      (Character_Type'Val (8_508), Character_Type'Val (8_509)),
      (Character_Type'Val (8_518), Character_Type'Val (8_521)),
      (Character_Type'Val (8_526), Character_Type'Val (8_526)),
      (Character_Type'Val (8_580), Character_Type'Val (8_580)),
      (Character_Type'Val (11_312), Character_Type'Val (11_358)),
      (Character_Type'Val (11_361), Character_Type'Val (11_361)),
      (Character_Type'Val (11_365), Character_Type'Val (11_366)),
      (Character_Type'Val (11_368), Character_Type'Val (11_368)),
      (Character_Type'Val (11_370), Character_Type'Val (11_370)),
      (Character_Type'Val (11_372), Character_Type'Val (11_372)),
      (Character_Type'Val (11_377), Character_Type'Val (11_377)),
      (Character_Type'Val (11_379), Character_Type'Val (11_380)),
      (Character_Type'Val (11_382), Character_Type'Val (11_388)),
      (Character_Type'Val (11_393), Character_Type'Val (11_393)),
      (Character_Type'Val (11_395), Character_Type'Val (11_395)),
      (Character_Type'Val (11_397), Character_Type'Val (11_397)),
      (Character_Type'Val (11_399), Character_Type'Val (11_399)),
      (Character_Type'Val (11_401), Character_Type'Val (11_401)),
      (Character_Type'Val (11_403), Character_Type'Val (11_403)),
      (Character_Type'Val (11_405), Character_Type'Val (11_405)),
      (Character_Type'Val (11_407), Character_Type'Val (11_407)),
      (Character_Type'Val (11_409), Character_Type'Val (11_409)),
      (Character_Type'Val (11_411), Character_Type'Val (11_411)),
      (Character_Type'Val (11_413), Character_Type'Val (11_413)),
      (Character_Type'Val (11_415), Character_Type'Val (11_415)),
      (Character_Type'Val (11_417), Character_Type'Val (11_417)),
      (Character_Type'Val (11_419), Character_Type'Val (11_419)),
      (Character_Type'Val (11_421), Character_Type'Val (11_421)),
      (Character_Type'Val (11_423), Character_Type'Val (11_423)),
      (Character_Type'Val (11_425), Character_Type'Val (11_425)),
      (Character_Type'Val (11_427), Character_Type'Val (11_427)),
      (Character_Type'Val (11_429), Character_Type'Val (11_429)),
      (Character_Type'Val (11_431), Character_Type'Val (11_431)),
      (Character_Type'Val (11_433), Character_Type'Val (11_433)),
      (Character_Type'Val (11_435), Character_Type'Val (11_435)),
      (Character_Type'Val (11_437), Character_Type'Val (11_437)),
      (Character_Type'Val (11_439), Character_Type'Val (11_439)),
      (Character_Type'Val (11_441), Character_Type'Val (11_441)),
      (Character_Type'Val (11_443), Character_Type'Val (11_443)),
      (Character_Type'Val (11_445), Character_Type'Val (11_445)),
      (Character_Type'Val (11_447), Character_Type'Val (11_447)),
      (Character_Type'Val (11_449), Character_Type'Val (11_449)),
      (Character_Type'Val (11_451), Character_Type'Val (11_451)),
      (Character_Type'Val (11_453), Character_Type'Val (11_453)),
      (Character_Type'Val (11_455), Character_Type'Val (11_455)),
      (Character_Type'Val (11_457), Character_Type'Val (11_457)),
      (Character_Type'Val (11_459), Character_Type'Val (11_459)),
      (Character_Type'Val (11_461), Character_Type'Val (11_461)),
      (Character_Type'Val (11_463), Character_Type'Val (11_463)),
      (Character_Type'Val (11_465), Character_Type'Val (11_465)),
      (Character_Type'Val (11_467), Character_Type'Val (11_467)),
      (Character_Type'Val (11_469), Character_Type'Val (11_469)),
      (Character_Type'Val (11_471), Character_Type'Val (11_471)),
      (Character_Type'Val (11_473), Character_Type'Val (11_473)),
      (Character_Type'Val (11_475), Character_Type'Val (11_475)),
      (Character_Type'Val (11_477), Character_Type'Val (11_477)),
      (Character_Type'Val (11_479), Character_Type'Val (11_479)),
      (Character_Type'Val (11_481), Character_Type'Val (11_481)),
      (Character_Type'Val (11_483), Character_Type'Val (11_483)),
      (Character_Type'Val (11_485), Character_Type'Val (11_485)),
      (Character_Type'Val (11_487), Character_Type'Val (11_487)),
      (Character_Type'Val (11_489), Character_Type'Val (11_489)),
      (Character_Type'Val (11_491), Character_Type'Val (11_492)),
      (Character_Type'Val (11_500), Character_Type'Val (11_500)),
      (Character_Type'Val (11_502), Character_Type'Val (11_502)),
      (Character_Type'Val (11_520), Character_Type'Val (11_557)),
      (Character_Type'Val (42_561), Character_Type'Val (42_561)),
      (Character_Type'Val (42_563), Character_Type'Val (42_563)),
      (Character_Type'Val (42_565), Character_Type'Val (42_565)),
      (Character_Type'Val (42_567), Character_Type'Val (42_567)),
      (Character_Type'Val (42_569), Character_Type'Val (42_569)),
      (Character_Type'Val (42_571), Character_Type'Val (42_571)),
      (Character_Type'Val (42_573), Character_Type'Val (42_573)),
      (Character_Type'Val (42_575), Character_Type'Val (42_575)),
      (Character_Type'Val (42_577), Character_Type'Val (42_577)),
      (Character_Type'Val (42_579), Character_Type'Val (42_579)),
      (Character_Type'Val (42_581), Character_Type'Val (42_581)),
      (Character_Type'Val (42_583), Character_Type'Val (42_583)),
      (Character_Type'Val (42_585), Character_Type'Val (42_585)),
      (Character_Type'Val (42_587), Character_Type'Val (42_587)),
      (Character_Type'Val (42_589), Character_Type'Val (42_589)),
      (Character_Type'Val (42_591), Character_Type'Val (42_591)),
      (Character_Type'Val (42_595), Character_Type'Val (42_595)),
      (Character_Type'Val (42_597), Character_Type'Val (42_597)),
      (Character_Type'Val (42_599), Character_Type'Val (42_599)),
      (Character_Type'Val (42_601), Character_Type'Val (42_601)),
      (Character_Type'Val (42_603), Character_Type'Val (42_603)),
      (Character_Type'Val (42_605), Character_Type'Val (42_605)),
      (Character_Type'Val (42_625), Character_Type'Val (42_625)),
      (Character_Type'Val (42_627), Character_Type'Val (42_627)),
      (Character_Type'Val (42_629), Character_Type'Val (42_629)),
      (Character_Type'Val (42_631), Character_Type'Val (42_631)),
      (Character_Type'Val (42_633), Character_Type'Val (42_633)),
      (Character_Type'Val (42_635), Character_Type'Val (42_635)),
      (Character_Type'Val (42_637), Character_Type'Val (42_637)),
      (Character_Type'Val (42_639), Character_Type'Val (42_639)),
      (Character_Type'Val (42_641), Character_Type'Val (42_641)),
      (Character_Type'Val (42_643), Character_Type'Val (42_643)),
      (Character_Type'Val (42_645), Character_Type'Val (42_645)),
      (Character_Type'Val (42_647), Character_Type'Val (42_647)),
      (Character_Type'Val (42_787), Character_Type'Val (42_787)),
      (Character_Type'Val (42_789), Character_Type'Val (42_789)),
      (Character_Type'Val (42_791), Character_Type'Val (42_791)),
      (Character_Type'Val (42_793), Character_Type'Val (42_793)),
      (Character_Type'Val (42_795), Character_Type'Val (42_795)),
      (Character_Type'Val (42_797), Character_Type'Val (42_797)),
      (Character_Type'Val (42_799), Character_Type'Val (42_801)),
      (Character_Type'Val (42_803), Character_Type'Val (42_803)),
      (Character_Type'Val (42_805), Character_Type'Val (42_805)),
      (Character_Type'Val (42_807), Character_Type'Val (42_807)),
      (Character_Type'Val (42_809), Character_Type'Val (42_809)),
      (Character_Type'Val (42_811), Character_Type'Val (42_811)),
      (Character_Type'Val (42_813), Character_Type'Val (42_813)),
      (Character_Type'Val (42_815), Character_Type'Val (42_815)),
      (Character_Type'Val (42_817), Character_Type'Val (42_817)),
      (Character_Type'Val (42_819), Character_Type'Val (42_819)),
      (Character_Type'Val (42_821), Character_Type'Val (42_821)),
      (Character_Type'Val (42_823), Character_Type'Val (42_823)),
      (Character_Type'Val (42_825), Character_Type'Val (42_825)),
      (Character_Type'Val (42_827), Character_Type'Val (42_827)),
      (Character_Type'Val (42_829), Character_Type'Val (42_829)),
      (Character_Type'Val (42_831), Character_Type'Val (42_831)),
      (Character_Type'Val (42_833), Character_Type'Val (42_833)),
      (Character_Type'Val (42_835), Character_Type'Val (42_835)),
      (Character_Type'Val (42_837), Character_Type'Val (42_837)),
      (Character_Type'Val (42_839), Character_Type'Val (42_839)),
      (Character_Type'Val (42_841), Character_Type'Val (42_841)),
      (Character_Type'Val (42_843), Character_Type'Val (42_843)),
      (Character_Type'Val (42_845), Character_Type'Val (42_845)),
      (Character_Type'Val (42_847), Character_Type'Val (42_847)),
      (Character_Type'Val (42_849), Character_Type'Val (42_849)),
      (Character_Type'Val (42_851), Character_Type'Val (42_851)),
      (Character_Type'Val (42_853), Character_Type'Val (42_853)),
      (Character_Type'Val (42_855), Character_Type'Val (42_855)),
      (Character_Type'Val (42_857), Character_Type'Val (42_857)),
      (Character_Type'Val (42_859), Character_Type'Val (42_859)),
      (Character_Type'Val (42_861), Character_Type'Val (42_861)),
      (Character_Type'Val (42_863), Character_Type'Val (42_863)),
      (Character_Type'Val (42_865), Character_Type'Val (42_872)),
      (Character_Type'Val (42_874), Character_Type'Val (42_874)),
      (Character_Type'Val (42_876), Character_Type'Val (42_876)),
      (Character_Type'Val (42_879), Character_Type'Val (42_879)),
      (Character_Type'Val (42_881), Character_Type'Val (42_881)),
      (Character_Type'Val (42_883), Character_Type'Val (42_883)),
      (Character_Type'Val (42_885), Character_Type'Val (42_885)),
      (Character_Type'Val (42_887), Character_Type'Val (42_887)),
      (Character_Type'Val (42_892), Character_Type'Val (42_892)),
      (Character_Type'Val (64_256), Character_Type'Val (64_262)),
      (Character_Type'Val (64_275), Character_Type'Val (64_279)),
      (Character_Type'Val (65_345), Character_Type'Val (65_370)),
      (Character_Type'Val (66_600), Character_Type'Val (66_639)),
      (Character_Type'Val (119_834), Character_Type'Val (119_859)),
      (Character_Type'Val (119_886), Character_Type'Val (119_892)),
      (Character_Type'Val (119_894), Character_Type'Val (119_911)),
      (Character_Type'Val (119_938), Character_Type'Val (119_963)),
      (Character_Type'Val (119_990), Character_Type'Val (119_993)),
      (Character_Type'Val (119_995), Character_Type'Val (119_995)),
      (Character_Type'Val (119_997), Character_Type'Val (120_003)),
      (Character_Type'Val (120_005), Character_Type'Val (120_015)),
      (Character_Type'Val (120_042), Character_Type'Val (120_067)),
      (Character_Type'Val (120_094), Character_Type'Val (120_119)),
      (Character_Type'Val (120_146), Character_Type'Val (120_171)),
      (Character_Type'Val (120_198), Character_Type'Val (120_223)),
      (Character_Type'Val (120_250), Character_Type'Val (120_275)),
      (Character_Type'Val (120_302), Character_Type'Val (120_327)),
      (Character_Type'Val (120_354), Character_Type'Val (120_379)),
      (Character_Type'Val (120_406), Character_Type'Val (120_431)),
      (Character_Type'Val (120_458), Character_Type'Val (120_485)),
      (Character_Type'Val (120_514), Character_Type'Val (120_538)),
      (Character_Type'Val (120_540), Character_Type'Val (120_545)),
      (Character_Type'Val (120_572), Character_Type'Val (120_596)),
      (Character_Type'Val (120_598), Character_Type'Val (120_603)),
      (Character_Type'Val (120_630), Character_Type'Val (120_654)),
      (Character_Type'Val (120_656), Character_Type'Val (120_661)),
      (Character_Type'Val (120_688), Character_Type'Val (120_712)),
      (Character_Type'Val (120_714), Character_Type'Val (120_719)),
      (Character_Type'Val (120_746), Character_Type'Val (120_770)),
      (Character_Type'Val (120_772), Character_Type'Val (120_777)),
      (Character_Type'Val (120_779), Character_Type'Val (120_779)));
   Ranges_2 : constant Character_Range_Array :=
     ((Character_Type'Val (443), Character_Type'Val (443)),
      (Character_Type'Val (448), Character_Type'Val (451)),
      (Character_Type'Val (660), Character_Type'Val (660)),
      (Character_Type'Val (1_488), Character_Type'Val (1_514)),
      (Character_Type'Val (1_520), Character_Type'Val (1_522)),
      (Character_Type'Val (1_569), Character_Type'Val (1_599)),
      (Character_Type'Val (1_601), Character_Type'Val (1_610)),
      (Character_Type'Val (1_646), Character_Type'Val (1_647)),
      (Character_Type'Val (1_649), Character_Type'Val (1_747)),
      (Character_Type'Val (1_749), Character_Type'Val (1_749)),
      (Character_Type'Val (1_774), Character_Type'Val (1_775)),
      (Character_Type'Val (1_786), Character_Type'Val (1_788)),
      (Character_Type'Val (1_791), Character_Type'Val (1_791)),
      (Character_Type'Val (1_808), Character_Type'Val (1_808)),
      (Character_Type'Val (1_810), Character_Type'Val (1_839)),
      (Character_Type'Val (1_869), Character_Type'Val (1_957)),
      (Character_Type'Val (1_969), Character_Type'Val (1_969)),
      (Character_Type'Val (1_994), Character_Type'Val (2_026)),
      (Character_Type'Val (2_048), Character_Type'Val (2_069)),
      (Character_Type'Val (2_308), Character_Type'Val (2_361)),
      (Character_Type'Val (2_365), Character_Type'Val (2_365)),
      (Character_Type'Val (2_384), Character_Type'Val (2_384)),
      (Character_Type'Val (2_392), Character_Type'Val (2_401)),
      (Character_Type'Val (2_418), Character_Type'Val (2_418)),
      (Character_Type'Val (2_425), Character_Type'Val (2_431)),
      (Character_Type'Val (2_437), Character_Type'Val (2_444)),
      (Character_Type'Val (2_447), Character_Type'Val (2_448)),
      (Character_Type'Val (2_451), Character_Type'Val (2_472)),
      (Character_Type'Val (2_474), Character_Type'Val (2_480)),
      (Character_Type'Val (2_482), Character_Type'Val (2_482)),
      (Character_Type'Val (2_486), Character_Type'Val (2_489)),
      (Character_Type'Val (2_493), Character_Type'Val (2_493)),
      (Character_Type'Val (2_510), Character_Type'Val (2_510)),
      (Character_Type'Val (2_524), Character_Type'Val (2_525)),
      (Character_Type'Val (2_527), Character_Type'Val (2_529)),
      (Character_Type'Val (2_544), Character_Type'Val (2_545)),
      (Character_Type'Val (2_565), Character_Type'Val (2_570)),
      (Character_Type'Val (2_575), Character_Type'Val (2_576)),
      (Character_Type'Val (2_579), Character_Type'Val (2_600)),
      (Character_Type'Val (2_602), Character_Type'Val (2_608)),
      (Character_Type'Val (2_610), Character_Type'Val (2_611)),
      (Character_Type'Val (2_613), Character_Type'Val (2_614)),
      (Character_Type'Val (2_616), Character_Type'Val (2_617)),
      (Character_Type'Val (2_649), Character_Type'Val (2_652)),
      (Character_Type'Val (2_654), Character_Type'Val (2_654)),
      (Character_Type'Val (2_674), Character_Type'Val (2_676)),
      (Character_Type'Val (2_693), Character_Type'Val (2_701)),
      (Character_Type'Val (2_703), Character_Type'Val (2_705)),
      (Character_Type'Val (2_707), Character_Type'Val (2_728)),
      (Character_Type'Val (2_730), Character_Type'Val (2_736)),
      (Character_Type'Val (2_738), Character_Type'Val (2_739)),
      (Character_Type'Val (2_741), Character_Type'Val (2_745)),
      (Character_Type'Val (2_749), Character_Type'Val (2_749)),
      (Character_Type'Val (2_768), Character_Type'Val (2_768)),
      (Character_Type'Val (2_784), Character_Type'Val (2_785)),
      (Character_Type'Val (2_821), Character_Type'Val (2_828)),
      (Character_Type'Val (2_831), Character_Type'Val (2_832)),
      (Character_Type'Val (2_835), Character_Type'Val (2_856)),
      (Character_Type'Val (2_858), Character_Type'Val (2_864)),
      (Character_Type'Val (2_866), Character_Type'Val (2_867)),
      (Character_Type'Val (2_869), Character_Type'Val (2_873)),
      (Character_Type'Val (2_877), Character_Type'Val (2_877)),
      (Character_Type'Val (2_908), Character_Type'Val (2_909)),
      (Character_Type'Val (2_911), Character_Type'Val (2_913)),
      (Character_Type'Val (2_929), Character_Type'Val (2_929)),
      (Character_Type'Val (2_947), Character_Type'Val (2_947)),
      (Character_Type'Val (2_949), Character_Type'Val (2_954)),
      (Character_Type'Val (2_958), Character_Type'Val (2_960)),
      (Character_Type'Val (2_962), Character_Type'Val (2_965)),
      (Character_Type'Val (2_969), Character_Type'Val (2_970)),
      (Character_Type'Val (2_972), Character_Type'Val (2_972)),
      (Character_Type'Val (2_974), Character_Type'Val (2_975)),
      (Character_Type'Val (2_979), Character_Type'Val (2_980)),
      (Character_Type'Val (2_984), Character_Type'Val (2_986)),
      (Character_Type'Val (2_990), Character_Type'Val (3_001)),
      (Character_Type'Val (3_024), Character_Type'Val (3_024)),
      (Character_Type'Val (3_077), Character_Type'Val (3_084)),
      (Character_Type'Val (3_086), Character_Type'Val (3_088)),
      (Character_Type'Val (3_090), Character_Type'Val (3_112)),
      (Character_Type'Val (3_114), Character_Type'Val (3_123)),
      (Character_Type'Val (3_125), Character_Type'Val (3_129)),
      (Character_Type'Val (3_133), Character_Type'Val (3_133)),
      (Character_Type'Val (3_160), Character_Type'Val (3_161)),
      (Character_Type'Val (3_168), Character_Type'Val (3_169)),
      (Character_Type'Val (3_205), Character_Type'Val (3_212)),
      (Character_Type'Val (3_214), Character_Type'Val (3_216)),
      (Character_Type'Val (3_218), Character_Type'Val (3_240)),
      (Character_Type'Val (3_242), Character_Type'Val (3_251)),
      (Character_Type'Val (3_253), Character_Type'Val (3_257)),
      (Character_Type'Val (3_261), Character_Type'Val (3_261)),
      (Character_Type'Val (3_294), Character_Type'Val (3_294)),
      (Character_Type'Val (3_296), Character_Type'Val (3_297)),
      (Character_Type'Val (3_333), Character_Type'Val (3_340)),
      (Character_Type'Val (3_342), Character_Type'Val (3_344)),
      (Character_Type'Val (3_346), Character_Type'Val (3_368)),
      (Character_Type'Val (3_370), Character_Type'Val (3_385)),
      (Character_Type'Val (3_389), Character_Type'Val (3_389)),
      (Character_Type'Val (3_424), Character_Type'Val (3_425)),
      (Character_Type'Val (3_450), Character_Type'Val (3_455)),
      (Character_Type'Val (3_461), Character_Type'Val (3_478)),
      (Character_Type'Val (3_482), Character_Type'Val (3_505)),
      (Character_Type'Val (3_507), Character_Type'Val (3_515)),
      (Character_Type'Val (3_517), Character_Type'Val (3_517)),
      (Character_Type'Val (3_520), Character_Type'Val (3_526)),
      (Character_Type'Val (3_585), Character_Type'Val (3_632)),
      (Character_Type'Val (3_634), Character_Type'Val (3_635)),
      (Character_Type'Val (3_648), Character_Type'Val (3_653)),
      (Character_Type'Val (3_713), Character_Type'Val (3_714)),
      (Character_Type'Val (3_716), Character_Type'Val (3_716)),
      (Character_Type'Val (3_719), Character_Type'Val (3_720)),
      (Character_Type'Val (3_722), Character_Type'Val (3_722)),
      (Character_Type'Val (3_725), Character_Type'Val (3_725)),
      (Character_Type'Val (3_732), Character_Type'Val (3_735)),
      (Character_Type'Val (3_737), Character_Type'Val (3_743)),
      (Character_Type'Val (3_745), Character_Type'Val (3_747)),
      (Character_Type'Val (3_749), Character_Type'Val (3_749)),
      (Character_Type'Val (3_751), Character_Type'Val (3_751)),
      (Character_Type'Val (3_754), Character_Type'Val (3_755)),
      (Character_Type'Val (3_757), Character_Type'Val (3_760)),
      (Character_Type'Val (3_762), Character_Type'Val (3_763)),
      (Character_Type'Val (3_773), Character_Type'Val (3_773)),
      (Character_Type'Val (3_776), Character_Type'Val (3_780)),
      (Character_Type'Val (3_804), Character_Type'Val (3_805)),
      (Character_Type'Val (3_840), Character_Type'Val (3_840)),
      (Character_Type'Val (3_904), Character_Type'Val (3_911)),
      (Character_Type'Val (3_913), Character_Type'Val (3_948)),
      (Character_Type'Val (3_976), Character_Type'Val (3_979)),
      (Character_Type'Val (4_096), Character_Type'Val (4_138)),
      (Character_Type'Val (4_159), Character_Type'Val (4_159)),
      (Character_Type'Val (4_176), Character_Type'Val (4_181)),
      (Character_Type'Val (4_186), Character_Type'Val (4_189)),
      (Character_Type'Val (4_193), Character_Type'Val (4_193)),
      (Character_Type'Val (4_197), Character_Type'Val (4_198)),
      (Character_Type'Val (4_206), Character_Type'Val (4_208)),
      (Character_Type'Val (4_213), Character_Type'Val (4_225)),
      (Character_Type'Val (4_238), Character_Type'Val (4_238)),
      (Character_Type'Val (4_304), Character_Type'Val (4_346)),
      (Character_Type'Val (4_352), Character_Type'Val (4_680)),
      (Character_Type'Val (4_682), Character_Type'Val (4_685)),
      (Character_Type'Val (4_688), Character_Type'Val (4_694)),
      (Character_Type'Val (4_696), Character_Type'Val (4_696)),
      (Character_Type'Val (4_698), Character_Type'Val (4_701)),
      (Character_Type'Val (4_704), Character_Type'Val (4_744)),
      (Character_Type'Val (4_746), Character_Type'Val (4_749)),
      (Character_Type'Val (4_752), Character_Type'Val (4_784)),
      (Character_Type'Val (4_786), Character_Type'Val (4_789)),
      (Character_Type'Val (4_792), Character_Type'Val (4_798)),
      (Character_Type'Val (4_800), Character_Type'Val (4_800)),
      (Character_Type'Val (4_802), Character_Type'Val (4_805)),
      (Character_Type'Val (4_808), Character_Type'Val (4_822)),
      (Character_Type'Val (4_824), Character_Type'Val (4_880)),
      (Character_Type'Val (4_882), Character_Type'Val (4_885)),
      (Character_Type'Val (4_888), Character_Type'Val (4_954)),
      (Character_Type'Val (4_992), Character_Type'Val (5_007)),
      (Character_Type'Val (5_024), Character_Type'Val (5_108)),
      (Character_Type'Val (5_121), Character_Type'Val (5_740)),
      (Character_Type'Val (5_743), Character_Type'Val (5_759)),
      (Character_Type'Val (5_761), Character_Type'Val (5_786)),
      (Character_Type'Val (5_792), Character_Type'Val (5_866)),
      (Character_Type'Val (5_888), Character_Type'Val (5_900)),
      (Character_Type'Val (5_902), Character_Type'Val (5_905)),
      (Character_Type'Val (5_920), Character_Type'Val (5_937)),
      (Character_Type'Val (5_952), Character_Type'Val (5_969)),
      (Character_Type'Val (5_984), Character_Type'Val (5_996)),
      (Character_Type'Val (5_998), Character_Type'Val (6_000)),
      (Character_Type'Val (6_016), Character_Type'Val (6_067)),
      (Character_Type'Val (6_108), Character_Type'Val (6_108)),
      (Character_Type'Val (6_176), Character_Type'Val (6_210)),
      (Character_Type'Val (6_212), Character_Type'Val (6_263)),
      (Character_Type'Val (6_272), Character_Type'Val (6_312)),
      (Character_Type'Val (6_314), Character_Type'Val (6_314)),
      (Character_Type'Val (6_320), Character_Type'Val (6_389)),
      (Character_Type'Val (6_400), Character_Type'Val (6_428)),
      (Character_Type'Val (6_480), Character_Type'Val (6_509)),
      (Character_Type'Val (6_512), Character_Type'Val (6_516)),
      (Character_Type'Val (6_528), Character_Type'Val (6_571)),
      (Character_Type'Val (6_593), Character_Type'Val (6_599)),
      (Character_Type'Val (6_656), Character_Type'Val (6_678)),
      (Character_Type'Val (6_688), Character_Type'Val (6_740)),
      (Character_Type'Val (6_917), Character_Type'Val (6_963)),
      (Character_Type'Val (6_981), Character_Type'Val (6_987)),
      (Character_Type'Val (7_043), Character_Type'Val (7_072)),
      (Character_Type'Val (7_086), Character_Type'Val (7_087)),
      (Character_Type'Val (7_168), Character_Type'Val (7_203)),
      (Character_Type'Val (7_245), Character_Type'Val (7_247)),
      (Character_Type'Val (7_258), Character_Type'Val (7_287)),
      (Character_Type'Val (7_401), Character_Type'Val (7_404)),
      (Character_Type'Val (7_406), Character_Type'Val (7_409)),
      (Character_Type'Val (8_501), Character_Type'Val (8_504)),
      (Character_Type'Val (11_568), Character_Type'Val (11_621)),
      (Character_Type'Val (11_648), Character_Type'Val (11_670)),
      (Character_Type'Val (11_680), Character_Type'Val (11_686)),
      (Character_Type'Val (11_688), Character_Type'Val (11_694)),
      (Character_Type'Val (11_696), Character_Type'Val (11_702)),
      (Character_Type'Val (11_704), Character_Type'Val (11_710)),
      (Character_Type'Val (11_712), Character_Type'Val (11_718)),
      (Character_Type'Val (11_720), Character_Type'Val (11_726)),
      (Character_Type'Val (11_728), Character_Type'Val (11_734)),
      (Character_Type'Val (11_736), Character_Type'Val (11_742)),
      (Character_Type'Val (12_294), Character_Type'Val (12_294)),
      (Character_Type'Val (12_348), Character_Type'Val (12_348)),
      (Character_Type'Val (12_353), Character_Type'Val (12_438)),
      (Character_Type'Val (12_447), Character_Type'Val (12_447)),
      (Character_Type'Val (12_449), Character_Type'Val (12_538)),
      (Character_Type'Val (12_543), Character_Type'Val (12_543)),
      (Character_Type'Val (12_549), Character_Type'Val (12_589)),
      (Character_Type'Val (12_593), Character_Type'Val (12_686)),
      (Character_Type'Val (12_704), Character_Type'Val (12_727)),
      (Character_Type'Val (12_784), Character_Type'Val (12_799)),
      (Character_Type'Val (13_312), Character_Type'Val (19_893)),
      (Character_Type'Val (19_968), Character_Type'Val (40_907)),
      (Character_Type'Val (40_960), Character_Type'Val (40_980)),
      (Character_Type'Val (40_982), Character_Type'Val (42_124)),
      (Character_Type'Val (42_192), Character_Type'Val (42_231)),
      (Character_Type'Val (42_240), Character_Type'Val (42_507)),
      (Character_Type'Val (42_512), Character_Type'Val (42_527)),
      (Character_Type'Val (42_538), Character_Type'Val (42_539)),
      (Character_Type'Val (42_606), Character_Type'Val (42_606)),
      (Character_Type'Val (42_656), Character_Type'Val (42_725)),
      (Character_Type'Val (43_003), Character_Type'Val (43_009)),
      (Character_Type'Val (43_011), Character_Type'Val (43_013)),
      (Character_Type'Val (43_015), Character_Type'Val (43_018)),
      (Character_Type'Val (43_020), Character_Type'Val (43_042)),
      (Character_Type'Val (43_072), Character_Type'Val (43_123)),
      (Character_Type'Val (43_138), Character_Type'Val (43_187)),
      (Character_Type'Val (43_250), Character_Type'Val (43_255)),
      (Character_Type'Val (43_259), Character_Type'Val (43_259)),
      (Character_Type'Val (43_274), Character_Type'Val (43_301)),
      (Character_Type'Val (43_312), Character_Type'Val (43_334)),
      (Character_Type'Val (43_360), Character_Type'Val (43_388)),
      (Character_Type'Val (43_396), Character_Type'Val (43_442)),
      (Character_Type'Val (43_520), Character_Type'Val (43_560)),
      (Character_Type'Val (43_584), Character_Type'Val (43_586)),
      (Character_Type'Val (43_588), Character_Type'Val (43_595)),
      (Character_Type'Val (43_616), Character_Type'Val (43_631)),
      (Character_Type'Val (43_633), Character_Type'Val (43_638)),
      (Character_Type'Val (43_642), Character_Type'Val (43_642)),
      (Character_Type'Val (43_648), Character_Type'Val (43_695)),
      (Character_Type'Val (43_697), Character_Type'Val (43_697)),
      (Character_Type'Val (43_701), Character_Type'Val (43_702)),
      (Character_Type'Val (43_705), Character_Type'Val (43_709)),
      (Character_Type'Val (43_712), Character_Type'Val (43_712)),
      (Character_Type'Val (43_714), Character_Type'Val (43_714)),
      (Character_Type'Val (43_739), Character_Type'Val (43_740)),
      (Character_Type'Val (43_968), Character_Type'Val (44_002)),
      (Character_Type'Val (44_032), Character_Type'Val (55_203)),
      (Character_Type'Val (55_216), Character_Type'Val (55_238)),
      (Character_Type'Val (55_243), Character_Type'Val (55_291)),
      (Character_Type'Val (63_744), Character_Type'Val (64_045)),
      (Character_Type'Val (64_048), Character_Type'Val (64_109)),
      (Character_Type'Val (64_112), Character_Type'Val (64_217)),
      (Character_Type'Val (64_285), Character_Type'Val (64_285)),
      (Character_Type'Val (64_287), Character_Type'Val (64_296)),
      (Character_Type'Val (64_298), Character_Type'Val (64_310)),
      (Character_Type'Val (64_312), Character_Type'Val (64_316)),
      (Character_Type'Val (64_318), Character_Type'Val (64_318)),
      (Character_Type'Val (64_320), Character_Type'Val (64_321)),
      (Character_Type'Val (64_323), Character_Type'Val (64_324)),
      (Character_Type'Val (64_326), Character_Type'Val (64_433)),
      (Character_Type'Val (64_467), Character_Type'Val (64_829)),
      (Character_Type'Val (64_848), Character_Type'Val (64_911)),
      (Character_Type'Val (64_914), Character_Type'Val (64_967)),
      (Character_Type'Val (65_008), Character_Type'Val (65_019)),
      (Character_Type'Val (65_136), Character_Type'Val (65_140)),
      (Character_Type'Val (65_142), Character_Type'Val (65_276)),
      (Character_Type'Val (65_382), Character_Type'Val (65_391)),
      (Character_Type'Val (65_393), Character_Type'Val (65_437)),
      (Character_Type'Val (65_440), Character_Type'Val (65_470)),
      (Character_Type'Val (65_474), Character_Type'Val (65_479)),
      (Character_Type'Val (65_482), Character_Type'Val (65_487)),
      (Character_Type'Val (65_490), Character_Type'Val (65_495)),
      (Character_Type'Val (65_498), Character_Type'Val (65_500)),
      (Character_Type'Val (65_536), Character_Type'Val (65_547)),
      (Character_Type'Val (65_549), Character_Type'Val (65_574)),
      (Character_Type'Val (65_576), Character_Type'Val (65_594)),
      (Character_Type'Val (65_596), Character_Type'Val (65_597)),
      (Character_Type'Val (65_599), Character_Type'Val (65_613)),
      (Character_Type'Val (65_616), Character_Type'Val (65_629)),
      (Character_Type'Val (65_664), Character_Type'Val (65_786)),
      (Character_Type'Val (66_176), Character_Type'Val (66_204)),
      (Character_Type'Val (66_208), Character_Type'Val (66_256)),
      (Character_Type'Val (66_304), Character_Type'Val (66_334)),
      (Character_Type'Val (66_352), Character_Type'Val (66_368)),
      (Character_Type'Val (66_370), Character_Type'Val (66_377)),
      (Character_Type'Val (66_432), Character_Type'Val (66_461)),
      (Character_Type'Val (66_464), Character_Type'Val (66_499)),
      (Character_Type'Val (66_504), Character_Type'Val (66_511)),
      (Character_Type'Val (66_640), Character_Type'Val (66_717)),
      (Character_Type'Val (67_584), Character_Type'Val (67_589)),
      (Character_Type'Val (67_592), Character_Type'Val (67_592)),
      (Character_Type'Val (67_594), Character_Type'Val (67_637)),
      (Character_Type'Val (67_639), Character_Type'Val (67_640)),
      (Character_Type'Val (67_644), Character_Type'Val (67_644)),
      (Character_Type'Val (67_647), Character_Type'Val (67_669)),
      (Character_Type'Val (67_840), Character_Type'Val (67_861)),
      (Character_Type'Val (67_872), Character_Type'Val (67_897)),
      (Character_Type'Val (68_096), Character_Type'Val (68_096)),
      (Character_Type'Val (68_112), Character_Type'Val (68_115)),
      (Character_Type'Val (68_117), Character_Type'Val (68_119)),
      (Character_Type'Val (68_121), Character_Type'Val (68_147)),
      (Character_Type'Val (68_192), Character_Type'Val (68_220)),
      (Character_Type'Val (68_352), Character_Type'Val (68_405)),
      (Character_Type'Val (68_416), Character_Type'Val (68_437)),
      (Character_Type'Val (68_448), Character_Type'Val (68_466)),
      (Character_Type'Val (68_608), Character_Type'Val (68_680)),
      (Character_Type'Val (69_763), Character_Type'Val (69_807)),
      (Character_Type'Val (73_728), Character_Type'Val (74_606)),
      (Character_Type'Val (77_824), Character_Type'Val (78_894)),
      (Character_Type'Val (131_072), Character_Type'Val (173_782)),
      (Character_Type'Val (173_824), Character_Type'Val (177_972)),
      (Character_Type'Val (194_560), Character_Type'Val (195_101)));
   Ranges_3 : constant Character_Range_Array :=
     ((Character_Type'Val (453), Character_Type'Val (453)),
      (Character_Type'Val (456), Character_Type'Val (456)),
      (Character_Type'Val (459), Character_Type'Val (459)),
      (Character_Type'Val (498), Character_Type'Val (498)),
      (Character_Type'Val (8_072), Character_Type'Val (8_079)),
      (Character_Type'Val (8_088), Character_Type'Val (8_095)),
      (Character_Type'Val (8_104), Character_Type'Val (8_111)),
      (Character_Type'Val (8_124), Character_Type'Val (8_124)),
      (Character_Type'Val (8_140), Character_Type'Val (8_140)),
      (Character_Type'Val (8_188), Character_Type'Val (8_188)));
   Ranges_4 : constant Character_Range_Array :=
     ((Character_Type'Val (688), Character_Type'Val (705)),
      (Character_Type'Val (710), Character_Type'Val (721)),
      (Character_Type'Val (736), Character_Type'Val (740)),
      (Character_Type'Val (748), Character_Type'Val (748)),
      (Character_Type'Val (750), Character_Type'Val (750)),
      (Character_Type'Val (884), Character_Type'Val (884)),
      (Character_Type'Val (890), Character_Type'Val (890)),
      (Character_Type'Val (1_369), Character_Type'Val (1_369)),
      (Character_Type'Val (1_600), Character_Type'Val (1_600)),
      (Character_Type'Val (1_765), Character_Type'Val (1_766)),
      (Character_Type'Val (2_036), Character_Type'Val (2_037)),
      (Character_Type'Val (2_042), Character_Type'Val (2_042)),
      (Character_Type'Val (2_074), Character_Type'Val (2_074)),
      (Character_Type'Val (2_084), Character_Type'Val (2_084)),
      (Character_Type'Val (2_088), Character_Type'Val (2_088)),
      (Character_Type'Val (2_417), Character_Type'Val (2_417)),
      (Character_Type'Val (3_654), Character_Type'Val (3_654)),
      (Character_Type'Val (3_782), Character_Type'Val (3_782)),
      (Character_Type'Val (4_348), Character_Type'Val (4_348)),
      (Character_Type'Val (6_103), Character_Type'Val (6_103)),
      (Character_Type'Val (6_211), Character_Type'Val (6_211)),
      (Character_Type'Val (6_823), Character_Type'Val (6_823)),
      (Character_Type'Val (7_288), Character_Type'Val (7_293)),
      (Character_Type'Val (7_468), Character_Type'Val (7_521)),
      (Character_Type'Val (7_544), Character_Type'Val (7_544)),
      (Character_Type'Val (7_579), Character_Type'Val (7_615)),
      (Character_Type'Val (8_305), Character_Type'Val (8_305)),
      (Character_Type'Val (8_319), Character_Type'Val (8_319)),
      (Character_Type'Val (8_336), Character_Type'Val (8_340)),
      (Character_Type'Val (11_389), Character_Type'Val (11_389)),
      (Character_Type'Val (11_631), Character_Type'Val (11_631)),
      (Character_Type'Val (11_823), Character_Type'Val (11_823)),
      (Character_Type'Val (12_293), Character_Type'Val (12_293)),
      (Character_Type'Val (12_337), Character_Type'Val (12_341)),
      (Character_Type'Val (12_347), Character_Type'Val (12_347)),
      (Character_Type'Val (12_445), Character_Type'Val (12_446)),
      (Character_Type'Val (12_540), Character_Type'Val (12_542)),
      (Character_Type'Val (40_981), Character_Type'Val (40_981)),
      (Character_Type'Val (42_232), Character_Type'Val (42_237)),
      (Character_Type'Val (42_508), Character_Type'Val (42_508)),
      (Character_Type'Val (42_623), Character_Type'Val (42_623)),
      (Character_Type'Val (42_775), Character_Type'Val (42_783)),
      (Character_Type'Val (42_864), Character_Type'Val (42_864)),
      (Character_Type'Val (42_888), Character_Type'Val (42_888)),
      (Character_Type'Val (43_471), Character_Type'Val (43_471)),
      (Character_Type'Val (43_632), Character_Type'Val (43_632)),
      (Character_Type'Val (43_741), Character_Type'Val (43_741)),
      (Character_Type'Val (65_392), Character_Type'Val (65_392)),
      (Character_Type'Val (65_438), Character_Type'Val (65_439)));
   Ranges_5 : constant Character_Range_Array :=
     ((Character_Type'Val (5_870), Character_Type'Val (5_872)),
      (Character_Type'Val (8_544), Character_Type'Val (8_578)),
      (Character_Type'Val (8_581), Character_Type'Val (8_584)),
      (Character_Type'Val (12_295), Character_Type'Val (12_295)),
      (Character_Type'Val (12_321), Character_Type'Val (12_329)),
      (Character_Type'Val (12_344), Character_Type'Val (12_346)),
      (Character_Type'Val (42_726), Character_Type'Val (42_735)),
      (Character_Type'Val (65_856), Character_Type'Val (65_908)),
      (Character_Type'Val (66_369), Character_Type'Val (66_369)),
      (Character_Type'Val (66_378), Character_Type'Val (66_378)),
      (Character_Type'Val (66_513), Character_Type'Val (66_517)),
      (Character_Type'Val (74_752), Character_Type'Val (74_850)));
   Ranges_6 : constant Character_Range_Array :=
     ((Character_Type'Val (1_632), Character_Type'Val (1_641)),
      (Character_Type'Val (1_776), Character_Type'Val (1_785)),
      (Character_Type'Val (1_984), Character_Type'Val (1_993)),
      (Character_Type'Val (2_406), Character_Type'Val (2_415)),
      (Character_Type'Val (2_534), Character_Type'Val (2_543)),
      (Character_Type'Val (2_662), Character_Type'Val (2_671)),
      (Character_Type'Val (2_790), Character_Type'Val (2_799)),
      (Character_Type'Val (2_918), Character_Type'Val (2_927)),
      (Character_Type'Val (3_046), Character_Type'Val (3_055)),
      (Character_Type'Val (3_174), Character_Type'Val (3_183)),
      (Character_Type'Val (3_302), Character_Type'Val (3_311)),
      (Character_Type'Val (3_430), Character_Type'Val (3_439)),
      (Character_Type'Val (3_664), Character_Type'Val (3_673)),
      (Character_Type'Val (3_792), Character_Type'Val (3_801)),
      (Character_Type'Val (3_872), Character_Type'Val (3_881)),
      (Character_Type'Val (4_160), Character_Type'Val (4_169)),
      (Character_Type'Val (4_240), Character_Type'Val (4_249)),
      (Character_Type'Val (6_112), Character_Type'Val (6_121)),
      (Character_Type'Val (6_160), Character_Type'Val (6_169)),
      (Character_Type'Val (6_470), Character_Type'Val (6_479)),
      (Character_Type'Val (6_608), Character_Type'Val (6_618)),
      (Character_Type'Val (6_784), Character_Type'Val (6_793)),
      (Character_Type'Val (6_800), Character_Type'Val (6_809)),
      (Character_Type'Val (6_992), Character_Type'Val (7_001)),
      (Character_Type'Val (7_088), Character_Type'Val (7_097)),
      (Character_Type'Val (7_232), Character_Type'Val (7_241)),
      (Character_Type'Val (7_248), Character_Type'Val (7_257)),
      (Character_Type'Val (42_528), Character_Type'Val (42_537)),
      (Character_Type'Val (43_216), Character_Type'Val (43_225)),
      (Character_Type'Val (43_264), Character_Type'Val (43_273)),
      (Character_Type'Val (43_472), Character_Type'Val (43_481)),
      (Character_Type'Val (43_600), Character_Type'Val (43_609)),
      (Character_Type'Val (44_016), Character_Type'Val (44_025)),
      (Character_Type'Val (65_296), Character_Type'Val (65_305)),
      (Character_Type'Val (66_720), Character_Type'Val (66_729)),
      (Character_Type'Val (120_782), Character_Type'Val (120_831)));
   Ranges_7 : constant Character_Range_Array :=
     ((Character_Type'Val (768), Character_Type'Val (879)),
      (Character_Type'Val (1_155), Character_Type'Val (1_159)),
      (Character_Type'Val (1_425), Character_Type'Val (1_469)),
      (Character_Type'Val (1_471), Character_Type'Val (1_471)),
      (Character_Type'Val (1_473), Character_Type'Val (1_474)),
      (Character_Type'Val (1_476), Character_Type'Val (1_477)),
      (Character_Type'Val (1_479), Character_Type'Val (1_479)),
      (Character_Type'Val (1_552), Character_Type'Val (1_562)),
      (Character_Type'Val (1_611), Character_Type'Val (1_630)),
      (Character_Type'Val (1_648), Character_Type'Val (1_648)),
      (Character_Type'Val (1_750), Character_Type'Val (1_756)),
      (Character_Type'Val (1_759), Character_Type'Val (1_764)),
      (Character_Type'Val (1_767), Character_Type'Val (1_768)),
      (Character_Type'Val (1_770), Character_Type'Val (1_773)),
      (Character_Type'Val (1_809), Character_Type'Val (1_809)),
      (Character_Type'Val (1_840), Character_Type'Val (1_866)),
      (Character_Type'Val (1_958), Character_Type'Val (1_968)),
      (Character_Type'Val (2_027), Character_Type'Val (2_035)),
      (Character_Type'Val (2_070), Character_Type'Val (2_073)),
      (Character_Type'Val (2_075), Character_Type'Val (2_083)),
      (Character_Type'Val (2_085), Character_Type'Val (2_087)),
      (Character_Type'Val (2_089), Character_Type'Val (2_093)),
      (Character_Type'Val (2_304), Character_Type'Val (2_306)),
      (Character_Type'Val (2_364), Character_Type'Val (2_364)),
      (Character_Type'Val (2_369), Character_Type'Val (2_376)),
      (Character_Type'Val (2_381), Character_Type'Val (2_381)),
      (Character_Type'Val (2_385), Character_Type'Val (2_389)),
      (Character_Type'Val (2_402), Character_Type'Val (2_403)),
      (Character_Type'Val (2_433), Character_Type'Val (2_433)),
      (Character_Type'Val (2_492), Character_Type'Val (2_492)),
      (Character_Type'Val (2_497), Character_Type'Val (2_500)),
      (Character_Type'Val (2_509), Character_Type'Val (2_509)),
      (Character_Type'Val (2_530), Character_Type'Val (2_531)),
      (Character_Type'Val (2_561), Character_Type'Val (2_562)),
      (Character_Type'Val (2_620), Character_Type'Val (2_620)),
      (Character_Type'Val (2_625), Character_Type'Val (2_626)),
      (Character_Type'Val (2_631), Character_Type'Val (2_632)),
      (Character_Type'Val (2_635), Character_Type'Val (2_637)),
      (Character_Type'Val (2_641), Character_Type'Val (2_641)),
      (Character_Type'Val (2_672), Character_Type'Val (2_673)),
      (Character_Type'Val (2_677), Character_Type'Val (2_677)),
      (Character_Type'Val (2_689), Character_Type'Val (2_690)),
      (Character_Type'Val (2_748), Character_Type'Val (2_748)),
      (Character_Type'Val (2_753), Character_Type'Val (2_757)),
      (Character_Type'Val (2_759), Character_Type'Val (2_760)),
      (Character_Type'Val (2_765), Character_Type'Val (2_765)),
      (Character_Type'Val (2_786), Character_Type'Val (2_787)),
      (Character_Type'Val (2_817), Character_Type'Val (2_817)),
      (Character_Type'Val (2_876), Character_Type'Val (2_876)),
      (Character_Type'Val (2_879), Character_Type'Val (2_879)),
      (Character_Type'Val (2_881), Character_Type'Val (2_884)),
      (Character_Type'Val (2_893), Character_Type'Val (2_893)),
      (Character_Type'Val (2_902), Character_Type'Val (2_902)),
      (Character_Type'Val (2_914), Character_Type'Val (2_915)),
      (Character_Type'Val (2_946), Character_Type'Val (2_946)),
      (Character_Type'Val (3_008), Character_Type'Val (3_008)),
      (Character_Type'Val (3_021), Character_Type'Val (3_021)),
      (Character_Type'Val (3_134), Character_Type'Val (3_136)),
      (Character_Type'Val (3_142), Character_Type'Val (3_144)),
      (Character_Type'Val (3_146), Character_Type'Val (3_149)),
      (Character_Type'Val (3_157), Character_Type'Val (3_158)),
      (Character_Type'Val (3_170), Character_Type'Val (3_171)),
      (Character_Type'Val (3_260), Character_Type'Val (3_260)),
      (Character_Type'Val (3_263), Character_Type'Val (3_263)),
      (Character_Type'Val (3_270), Character_Type'Val (3_270)),
      (Character_Type'Val (3_276), Character_Type'Val (3_277)),
      (Character_Type'Val (3_298), Character_Type'Val (3_299)),
      (Character_Type'Val (3_393), Character_Type'Val (3_396)),
      (Character_Type'Val (3_405), Character_Type'Val (3_405)),
      (Character_Type'Val (3_426), Character_Type'Val (3_427)),
      (Character_Type'Val (3_530), Character_Type'Val (3_530)),
      (Character_Type'Val (3_538), Character_Type'Val (3_540)),
      (Character_Type'Val (3_542), Character_Type'Val (3_542)),
      (Character_Type'Val (3_633), Character_Type'Val (3_633)),
      (Character_Type'Val (3_636), Character_Type'Val (3_642)),
      (Character_Type'Val (3_655), Character_Type'Val (3_662)),
      (Character_Type'Val (3_761), Character_Type'Val (3_761)),
      (Character_Type'Val (3_764), Character_Type'Val (3_769)),
      (Character_Type'Val (3_771), Character_Type'Val (3_772)),
      (Character_Type'Val (3_784), Character_Type'Val (3_789)),
      (Character_Type'Val (3_864), Character_Type'Val (3_865)),
      (Character_Type'Val (3_893), Character_Type'Val (3_893)),
      (Character_Type'Val (3_895), Character_Type'Val (3_895)),
      (Character_Type'Val (3_897), Character_Type'Val (3_897)),
      (Character_Type'Val (3_953), Character_Type'Val (3_966)),
      (Character_Type'Val (3_968), Character_Type'Val (3_972)),
      (Character_Type'Val (3_974), Character_Type'Val (3_975)),
      (Character_Type'Val (3_984), Character_Type'Val (3_991)),
      (Character_Type'Val (3_993), Character_Type'Val (4_028)),
      (Character_Type'Val (4_038), Character_Type'Val (4_038)),
      (Character_Type'Val (4_141), Character_Type'Val (4_144)),
      (Character_Type'Val (4_146), Character_Type'Val (4_151)),
      (Character_Type'Val (4_153), Character_Type'Val (4_154)),
      (Character_Type'Val (4_157), Character_Type'Val (4_158)),
      (Character_Type'Val (4_184), Character_Type'Val (4_185)),
      (Character_Type'Val (4_190), Character_Type'Val (4_192)),
      (Character_Type'Val (4_209), Character_Type'Val (4_212)),
      (Character_Type'Val (4_226), Character_Type'Val (4_226)),
      (Character_Type'Val (4_229), Character_Type'Val (4_230)),
      (Character_Type'Val (4_237), Character_Type'Val (4_237)),
      (Character_Type'Val (4_253), Character_Type'Val (4_253)),
      (Character_Type'Val (4_959), Character_Type'Val (4_959)),
      (Character_Type'Val (5_906), Character_Type'Val (5_908)),
      (Character_Type'Val (5_938), Character_Type'Val (5_940)),
      (Character_Type'Val (5_970), Character_Type'Val (5_971)),
      (Character_Type'Val (6_002), Character_Type'Val (6_003)),
      (Character_Type'Val (6_071), Character_Type'Val (6_077)),
      (Character_Type'Val (6_086), Character_Type'Val (6_086)),
      (Character_Type'Val (6_089), Character_Type'Val (6_099)),
      (Character_Type'Val (6_109), Character_Type'Val (6_109)),
      (Character_Type'Val (6_155), Character_Type'Val (6_157)),
      (Character_Type'Val (6_313), Character_Type'Val (6_313)),
      (Character_Type'Val (6_432), Character_Type'Val (6_434)),
      (Character_Type'Val (6_439), Character_Type'Val (6_440)),
      (Character_Type'Val (6_450), Character_Type'Val (6_450)),
      (Character_Type'Val (6_457), Character_Type'Val (6_459)),
      (Character_Type'Val (6_679), Character_Type'Val (6_680)),
      (Character_Type'Val (6_742), Character_Type'Val (6_742)),
      (Character_Type'Val (6_744), Character_Type'Val (6_750)),
      (Character_Type'Val (6_752), Character_Type'Val (6_752)),
      (Character_Type'Val (6_754), Character_Type'Val (6_754)),
      (Character_Type'Val (6_757), Character_Type'Val (6_764)),
      (Character_Type'Val (6_771), Character_Type'Val (6_780)),
      (Character_Type'Val (6_783), Character_Type'Val (6_783)),
      (Character_Type'Val (6_912), Character_Type'Val (6_915)),
      (Character_Type'Val (6_964), Character_Type'Val (6_964)),
      (Character_Type'Val (6_966), Character_Type'Val (6_970)),
      (Character_Type'Val (6_972), Character_Type'Val (6_972)),
      (Character_Type'Val (6_978), Character_Type'Val (6_978)),
      (Character_Type'Val (7_019), Character_Type'Val (7_027)),
      (Character_Type'Val (7_040), Character_Type'Val (7_041)),
      (Character_Type'Val (7_074), Character_Type'Val (7_077)),
      (Character_Type'Val (7_080), Character_Type'Val (7_081)),
      (Character_Type'Val (7_212), Character_Type'Val (7_219)),
      (Character_Type'Val (7_222), Character_Type'Val (7_223)),
      (Character_Type'Val (7_376), Character_Type'Val (7_378)),
      (Character_Type'Val (7_380), Character_Type'Val (7_392)),
      (Character_Type'Val (7_394), Character_Type'Val (7_400)),
      (Character_Type'Val (7_405), Character_Type'Val (7_405)),
      (Character_Type'Val (7_616), Character_Type'Val (7_654)),
      (Character_Type'Val (7_677), Character_Type'Val (7_679)),
      (Character_Type'Val (8_400), Character_Type'Val (8_412)),
      (Character_Type'Val (8_417), Character_Type'Val (8_417)),
      (Character_Type'Val (8_421), Character_Type'Val (8_432)),
      (Character_Type'Val (11_503), Character_Type'Val (11_505)),
      (Character_Type'Val (11_744), Character_Type'Val (11_775)),
      (Character_Type'Val (12_330), Character_Type'Val (12_335)),
      (Character_Type'Val (12_441), Character_Type'Val (12_442)),
      (Character_Type'Val (42_607), Character_Type'Val (42_607)),
      (Character_Type'Val (42_620), Character_Type'Val (42_621)),
      (Character_Type'Val (42_736), Character_Type'Val (42_737)),
      (Character_Type'Val (43_010), Character_Type'Val (43_010)),
      (Character_Type'Val (43_014), Character_Type'Val (43_014)),
      (Character_Type'Val (43_019), Character_Type'Val (43_019)),
      (Character_Type'Val (43_045), Character_Type'Val (43_046)),
      (Character_Type'Val (43_204), Character_Type'Val (43_204)),
      (Character_Type'Val (43_232), Character_Type'Val (43_249)),
      (Character_Type'Val (43_302), Character_Type'Val (43_309)),
      (Character_Type'Val (43_335), Character_Type'Val (43_345)),
      (Character_Type'Val (43_392), Character_Type'Val (43_394)),
      (Character_Type'Val (43_443), Character_Type'Val (43_443)),
      (Character_Type'Val (43_446), Character_Type'Val (43_449)),
      (Character_Type'Val (43_452), Character_Type'Val (43_452)),
      (Character_Type'Val (43_561), Character_Type'Val (43_566)),
      (Character_Type'Val (43_569), Character_Type'Val (43_570)),
      (Character_Type'Val (43_573), Character_Type'Val (43_574)),
      (Character_Type'Val (43_587), Character_Type'Val (43_587)),
      (Character_Type'Val (43_596), Character_Type'Val (43_596)),
      (Character_Type'Val (43_696), Character_Type'Val (43_696)),
      (Character_Type'Val (43_698), Character_Type'Val (43_700)),
      (Character_Type'Val (43_703), Character_Type'Val (43_704)),
      (Character_Type'Val (43_710), Character_Type'Val (43_711)),
      (Character_Type'Val (43_713), Character_Type'Val (43_713)),
      (Character_Type'Val (44_005), Character_Type'Val (44_005)),
      (Character_Type'Val (44_008), Character_Type'Val (44_008)),
      (Character_Type'Val (44_013), Character_Type'Val (44_013)),
      (Character_Type'Val (64_286), Character_Type'Val (64_286)),
      (Character_Type'Val (65_024), Character_Type'Val (65_039)),
      (Character_Type'Val (65_056), Character_Type'Val (65_062)),
      (Character_Type'Val (66_045), Character_Type'Val (66_045)),
      (Character_Type'Val (68_097), Character_Type'Val (68_099)),
      (Character_Type'Val (68_101), Character_Type'Val (68_102)),
      (Character_Type'Val (68_108), Character_Type'Val (68_111)),
      (Character_Type'Val (68_152), Character_Type'Val (68_154)),
      (Character_Type'Val (68_159), Character_Type'Val (68_159)),
      (Character_Type'Val (69_760), Character_Type'Val (69_761)),
      (Character_Type'Val (69_811), Character_Type'Val (69_814)),
      (Character_Type'Val (69_817), Character_Type'Val (69_818)),
      (Character_Type'Val (119_143), Character_Type'Val (119_145)),
      (Character_Type'Val (119_163), Character_Type'Val (119_170)),
      (Character_Type'Val (119_173), Character_Type'Val (119_179)),
      (Character_Type'Val (119_210), Character_Type'Val (119_213)),
      (Character_Type'Val (119_362), Character_Type'Val (119_364)),
      (Character_Type'Val (917_760), Character_Type'Val (917_999)));
   Ranges_8 : constant Character_Range_Array :=
     ((Character_Type'Val (2_307), Character_Type'Val (2_307)),
      (Character_Type'Val (2_366), Character_Type'Val (2_368)),
      (Character_Type'Val (2_377), Character_Type'Val (2_380)),
      (Character_Type'Val (2_382), Character_Type'Val (2_382)),
      (Character_Type'Val (2_434), Character_Type'Val (2_435)),
      (Character_Type'Val (2_494), Character_Type'Val (2_496)),
      (Character_Type'Val (2_503), Character_Type'Val (2_504)),
      (Character_Type'Val (2_507), Character_Type'Val (2_508)),
      (Character_Type'Val (2_519), Character_Type'Val (2_519)),
      (Character_Type'Val (2_563), Character_Type'Val (2_563)),
      (Character_Type'Val (2_622), Character_Type'Val (2_624)),
      (Character_Type'Val (2_691), Character_Type'Val (2_691)),
      (Character_Type'Val (2_750), Character_Type'Val (2_752)),
      (Character_Type'Val (2_761), Character_Type'Val (2_761)),
      (Character_Type'Val (2_763), Character_Type'Val (2_764)),
      (Character_Type'Val (2_818), Character_Type'Val (2_819)),
      (Character_Type'Val (2_878), Character_Type'Val (2_878)),
      (Character_Type'Val (2_880), Character_Type'Val (2_880)),
      (Character_Type'Val (2_887), Character_Type'Val (2_888)),
      (Character_Type'Val (2_891), Character_Type'Val (2_892)),
      (Character_Type'Val (2_903), Character_Type'Val (2_903)),
      (Character_Type'Val (3_006), Character_Type'Val (3_007)),
      (Character_Type'Val (3_009), Character_Type'Val (3_010)),
      (Character_Type'Val (3_014), Character_Type'Val (3_016)),
      (Character_Type'Val (3_018), Character_Type'Val (3_020)),
      (Character_Type'Val (3_031), Character_Type'Val (3_031)),
      (Character_Type'Val (3_073), Character_Type'Val (3_075)),
      (Character_Type'Val (3_137), Character_Type'Val (3_140)),
      (Character_Type'Val (3_202), Character_Type'Val (3_203)),
      (Character_Type'Val (3_262), Character_Type'Val (3_262)),
      (Character_Type'Val (3_264), Character_Type'Val (3_268)),
      (Character_Type'Val (3_271), Character_Type'Val (3_272)),
      (Character_Type'Val (3_274), Character_Type'Val (3_275)),
      (Character_Type'Val (3_285), Character_Type'Val (3_286)),
      (Character_Type'Val (3_330), Character_Type'Val (3_331)),
      (Character_Type'Val (3_390), Character_Type'Val (3_392)),
      (Character_Type'Val (3_398), Character_Type'Val (3_400)),
      (Character_Type'Val (3_402), Character_Type'Val (3_404)),
      (Character_Type'Val (3_415), Character_Type'Val (3_415)),
      (Character_Type'Val (3_458), Character_Type'Val (3_459)),
      (Character_Type'Val (3_535), Character_Type'Val (3_537)),
      (Character_Type'Val (3_544), Character_Type'Val (3_551)),
      (Character_Type'Val (3_570), Character_Type'Val (3_571)),
      (Character_Type'Val (3_902), Character_Type'Val (3_903)),
      (Character_Type'Val (3_967), Character_Type'Val (3_967)),
      (Character_Type'Val (4_139), Character_Type'Val (4_140)),
      (Character_Type'Val (4_145), Character_Type'Val (4_145)),
      (Character_Type'Val (4_152), Character_Type'Val (4_152)),
      (Character_Type'Val (4_155), Character_Type'Val (4_156)),
      (Character_Type'Val (4_182), Character_Type'Val (4_183)),
      (Character_Type'Val (4_194), Character_Type'Val (4_196)),
      (Character_Type'Val (4_199), Character_Type'Val (4_205)),
      (Character_Type'Val (4_227), Character_Type'Val (4_228)),
      (Character_Type'Val (4_231), Character_Type'Val (4_236)),
      (Character_Type'Val (4_239), Character_Type'Val (4_239)),
      (Character_Type'Val (4_250), Character_Type'Val (4_252)),
      (Character_Type'Val (6_070), Character_Type'Val (6_070)),
      (Character_Type'Val (6_078), Character_Type'Val (6_085)),
      (Character_Type'Val (6_087), Character_Type'Val (6_088)),
      (Character_Type'Val (6_435), Character_Type'Val (6_438)),
      (Character_Type'Val (6_441), Character_Type'Val (6_443)),
      (Character_Type'Val (6_448), Character_Type'Val (6_449)),
      (Character_Type'Val (6_451), Character_Type'Val (6_456)),
      (Character_Type'Val (6_576), Character_Type'Val (6_592)),
      (Character_Type'Val (6_600), Character_Type'Val (6_601)),
      (Character_Type'Val (6_681), Character_Type'Val (6_683)),
      (Character_Type'Val (6_741), Character_Type'Val (6_741)),
      (Character_Type'Val (6_743), Character_Type'Val (6_743)),
      (Character_Type'Val (6_753), Character_Type'Val (6_753)),
      (Character_Type'Val (6_755), Character_Type'Val (6_756)),
      (Character_Type'Val (6_765), Character_Type'Val (6_770)),
      (Character_Type'Val (6_916), Character_Type'Val (6_916)),
      (Character_Type'Val (6_965), Character_Type'Val (6_965)),
      (Character_Type'Val (6_971), Character_Type'Val (6_971)),
      (Character_Type'Val (6_973), Character_Type'Val (6_977)),
      (Character_Type'Val (6_979), Character_Type'Val (6_980)),
      (Character_Type'Val (7_042), Character_Type'Val (7_042)),
      (Character_Type'Val (7_073), Character_Type'Val (7_073)),
      (Character_Type'Val (7_078), Character_Type'Val (7_079)),
      (Character_Type'Val (7_082), Character_Type'Val (7_082)),
      (Character_Type'Val (7_204), Character_Type'Val (7_211)),
      (Character_Type'Val (7_220), Character_Type'Val (7_221)),
      (Character_Type'Val (7_393), Character_Type'Val (7_393)),
      (Character_Type'Val (7_410), Character_Type'Val (7_410)),
      (Character_Type'Val (43_043), Character_Type'Val (43_044)),
      (Character_Type'Val (43_047), Character_Type'Val (43_047)),
      (Character_Type'Val (43_136), Character_Type'Val (43_137)),
      (Character_Type'Val (43_188), Character_Type'Val (43_203)),
      (Character_Type'Val (43_346), Character_Type'Val (43_347)),
      (Character_Type'Val (43_395), Character_Type'Val (43_395)),
      (Character_Type'Val (43_444), Character_Type'Val (43_445)),
      (Character_Type'Val (43_450), Character_Type'Val (43_451)),
      (Character_Type'Val (43_453), Character_Type'Val (43_456)),
      (Character_Type'Val (43_567), Character_Type'Val (43_568)),
      (Character_Type'Val (43_571), Character_Type'Val (43_572)),
      (Character_Type'Val (43_597), Character_Type'Val (43_597)),
      (Character_Type'Val (43_643), Character_Type'Val (43_643)),
      (Character_Type'Val (44_003), Character_Type'Val (44_004)),
      (Character_Type'Val (44_006), Character_Type'Val (44_007)),
      (Character_Type'Val (44_009), Character_Type'Val (44_010)),
      (Character_Type'Val (44_012), Character_Type'Val (44_012)),
      (Character_Type'Val (69_762), Character_Type'Val (69_762)),
      (Character_Type'Val (69_808), Character_Type'Val (69_810)),
      (Character_Type'Val (69_815), Character_Type'Val (69_816)),
      (Character_Type'Val (119_141), Character_Type'Val (119_142)),
      (Character_Type'Val (119_149), Character_Type'Val (119_154)));

   ----------------
   -- Next_Token --
   ----------------

   procedure Next_Token (Self : in out Lexer_State; Token : out Lexed_Token) is
      Input : constant Text_Access := Self.Input;

      First_Index : Positive;
      --  Index of the first input character for the token to return

      Index : Positive;
      --  Index for the next input character to be analyzed

      Match_Index : Natural;
      --  If we found a match, index for its last character. Otherwise, zero.

      Match_Ignore : Boolean;
      --  If we found a match, whether we must ignore it and restart the
      --  automaton after its character range.

      Match_Kind : Token_Kind;
      --  If we found a match and it is not ignored, kind for the token to
      --  emit. Meaningless otherwise.
   begin
      First_Index := Self.Last_Token.Text_Last + 1;

      <<Start>>
      Index        := First_Index;
      Match_Index  := 0;
      Match_Ignore := False;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#9#) .. Character_Type'Val (16#a#) |
              Character_Type'Val (16#c#) .. Character_Type'Val (16#d#) | ' ' =>
               goto State_1;
            when '!' =>
               goto State_2;
            when '"' =>
               goto State_3;
            when '#' =>
               goto State_4;
            when '$' =>
               goto State_5;
            when '%' =>
               goto State_6;
            when '&' =>
               goto State_7;
            when ''' =>
               goto State_8;
            when '(' =>
               goto State_9;
            when ')' =>
               goto State_10;
            when '*' =>
               goto State_11;
            when '+' =>
               goto State_12;
            when ',' =>
               goto State_13;
            when '-' =>
               goto State_14;
            when '.' =>
               goto State_15;
            when '/' =>
               goto State_16;
            when '0' .. '9' =>
               goto State_17;
            when ':' =>
               goto State_18;
            when ';' =>
               goto State_19;
            when '<' =>
               goto State_20;
            when '=' =>
               goto State_21;
            when '>' =>
               goto State_22;
            when '@' =>
               goto State_23;
            when 'A' =>
               goto State_24;
            when 'B' .. 'A' | 'C' .. 'B' | 'D' .. 'C' | 'E' .. 'D' |
              'F' .. 'E' | 'G' .. 'F' | 'H' | 'J' .. 'K' | 'M' .. 'L' |
              'N' .. 'M' | 'O' .. 'N' | 'P' .. 'O' | 'Q' | 'S' .. 'R' |
              'T' .. 'S' | 'U' .. 'T' | 'V' | 'X' .. 'W' | 'Y' .. 'Z' =>
               goto State_25;
            when 'B' =>
               goto State_26;
            when 'C' =>
               goto State_27;
            when 'D' =>
               goto State_28;
            when 'E' =>
               goto State_29;
            when 'F' =>
               goto State_30;
            when 'G' =>
               goto State_31;
            when 'I' =>
               goto State_32;
            when 'L' =>
               goto State_33;
            when 'M' =>
               goto State_34;
            when 'N' =>
               goto State_35;
            when 'O' =>
               goto State_36;
            when 'P' =>
               goto State_37;
            when 'R' =>
               goto State_38;
            when 'S' =>
               goto State_39;
            when 'T' =>
               goto State_40;
            when 'U' =>
               goto State_41;
            when 'W' =>
               goto State_42;
            when 'X' =>
               goto State_43;
            when '[' =>
               goto State_44;
            when 'a' =>
               goto State_45;
            when 'b' .. 'a' | 'c' .. 'b' | 'd' .. 'c' | 'e' .. 'd' |
              'f' .. 'e' | 'g' .. 'f' | 'h' | 'j' .. 'k' | 'm' .. 'l' |
              'n' .. 'm' | 'o' .. 'n' | 'p' .. 'o' | 'q' | 's' .. 'r' |
              't' .. 's' | 'u' .. 't' | 'v' | 'x' .. 'w' | 'y' .. 'z' =>
               goto State_46;
            when 'b' =>
               goto State_47;
            when 'c' =>
               goto State_48;
            when 'd' =>
               goto State_49;
            when 'e' =>
               goto State_50;
            when 'f' =>
               goto State_51;
            when 'g' =>
               goto State_52;
            when 'i' =>
               goto State_53;
            when 'l' =>
               goto State_54;
            when 'm' =>
               goto State_55;
            when 'n' =>
               goto State_56;
            when 'o' =>
               goto State_57;
            when 'p' =>
               goto State_58;
            when 'r' =>
               goto State_59;
            when 's' =>
               goto State_60;
            when 't' =>
               goto State_61;
            when 'u' =>
               goto State_62;
            when 'w' =>
               goto State_63;
            when 'x' =>
               goto State_64;
            when '|' =>
               goto State_65;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_25;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_46;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_66;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_67;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_68;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_69;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_1>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Whitespace;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#9#) .. Character_Type'Val (16#a#) |
              Character_Type'Val (16#c#) .. Character_Type'Val (16#d#) | ' ' =>
               goto State_70;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_2>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Pipe;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_3>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_71;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_72;
            when '"' =>
               goto State_73;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_4>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Prep_Line;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#)    |
              Character_Type'Val (16#b#) .. Character_Type'Val (16#10_ffff#) =>
               goto State_74;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_5>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_25;
            when '[' =>
               goto State_44;
            when 'a' .. 'z' =>
               goto State_46;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_25;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_68;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_46;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_66;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_67;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_69;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_6>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '%' =>
               goto State_75;
            when '[' =>
               goto State_76;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '$' | '&' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_7>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Amp;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_8>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Tick;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. 'Z'                           |
              '\' .. Character_Type'Val (16#10_ffff#)                     =>
               goto State_78;
            when '[' =>
               goto State_79;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_9>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Par_Open;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_10>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Par_Close;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_11>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Mult;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '*' =>
               goto State_80;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_12>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Plus;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_13>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Comma;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_14>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Minus;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '-' =>
               goto State_81;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_15>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Dot;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '.' =>
               goto State_82;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_16>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Divide;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '=' =>
               goto State_83;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_17>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '#' | ':' =>
               goto State_84;
            when '_' =>
               goto State_85;
            when 'E' | 'e' =>
               goto State_86;
            when '0' .. '9' =>
               goto State_87;
            when '.' =>
               goto State_88;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_18>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Colon;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '=' =>
               goto State_89;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_19>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Semicolon;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_20>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Lt;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '<' =>
               goto State_90;
            when '>' =>
               goto State_91;
            when '=' =>
               goto State_92;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_21>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Equal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '>' =>
               goto State_93;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_22>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Gt;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '>' =>
               goto State_94;
            when '=' =>
               goto State_95;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_23>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Target;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_24>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' | 'C' .. 'B' | 'D' .. 'K' | 'M' | 'O' .. 'Q' | 'S' |
              'U' .. 'Z' =>
               goto State_97;
            when 'B' =>
               goto State_98;
            when 'C' =>
               goto State_99;
            when 'L' =>
               goto State_100;
            when 'N' =>
               goto State_101;
            when 'R' =>
               goto State_102;
            when 'T' =>
               goto State_103;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' | 'c' .. 'b' | 'd' .. 'k' | 'm' | 'o' .. 'q' | 's' |
              'u' .. 'z' =>
               goto State_106;
            when 'b' =>
               goto State_107;
            when 'c' =>
               goto State_108;
            when 'l' =>
               goto State_109;
            when 'n' =>
               goto State_110;
            when 'r' =>
               goto State_111;
            when 't' =>
               goto State_112;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_25>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_26>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_119;
            when 'O' =>
               goto State_120;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_121;
            when 'o' =>
               goto State_122;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_27>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_123;
            when 'B' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_124;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_125;
            when 'b' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_126;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_28>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'H' | 'J' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_127;
            when 'I' =>
               goto State_128;
            when 'O' =>
               goto State_129;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'h' | 'j' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_130;
            when 'i' =>
               goto State_131;
            when 'o' =>
               goto State_132;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_29>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' | 'O' .. 'W' | 'Y' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_133;
            when 'N' =>
               goto State_134;
            when 'X' =>
               goto State_135;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' | 'o' .. 'w' | 'y' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_136;
            when 'n' =>
               goto State_137;
            when 'x' =>
               goto State_138;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_30>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_139;
            when 'U' =>
               goto State_140;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_141;
            when 'u' =>
               goto State_142;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_31>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'D' | 'F' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when 'O' =>
               goto State_143;
            when 'E' =>
               goto State_144;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_145;
            when 'o' =>
               goto State_146;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_32>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'E' | 'G' .. 'M' | 'O' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'F' =>
               goto State_147;
            when 'N' =>
               goto State_148;
            when 'S' =>
               goto State_149;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'e' | 'g' .. 'm' | 'o' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 'f' =>
               goto State_150;
            when 'n' =>
               goto State_151;
            when 's' =>
               goto State_152;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_33>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_153;
            when 'O' =>
               goto State_154;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_155;
            when 'o' =>
               goto State_156;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_34>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_157;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_158;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_35>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'N' | 'P' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_159;
            when 'O' =>
               goto State_160;
            when 'U' =>
               goto State_161;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'n' | 'p' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_162;
            when 'o' =>
               goto State_163;
            when 'u' =>
               goto State_164;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_36>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'E' | 'G' .. 'Q' | 'S' | 'U' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'F' =>
               goto State_165;
            when 'R' =>
               goto State_166;
            when 'T' =>
               goto State_167;
            when 'U' =>
               goto State_168;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'e' | 'g' .. 'q' | 's' | 'u' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'f' =>
               goto State_169;
            when 'r' =>
               goto State_170;
            when 't' =>
               goto State_171;
            when 'u' =>
               goto State_172;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_37>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_173;
            when 'B' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_174;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_175;
            when 'b' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_176;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_38>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_177;
            when 'B' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_178;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_179;
            when 'b' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_180;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_39>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_181;
            when 'U' =>
               goto State_182;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_183;
            when 'u' =>
               goto State_184;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_40>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_185;
            when 'B' .. 'D' | 'F' .. 'G' | 'I' .. 'X' | 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_186;
            when 'H' =>
               goto State_187;
            when 'Y' =>
               goto State_188;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_189;
            when 'b' .. 'd' | 'f' .. 'g' | 'i' .. 'x' | 'z' =>
               goto State_106;
            when 'e' =>
               goto State_190;
            when 'h' =>
               goto State_191;
            when 'y' =>
               goto State_192;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_41>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_193;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_194;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_42>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'G' | 'I' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'H' =>
               goto State_195;
            when 'I' =>
               goto State_196;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'g' | 'i' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'h' =>
               goto State_197;
            when 'i' =>
               goto State_198;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_43>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_199;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_200;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_44>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_201;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_45>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' | 'C' .. 'B' | 'D' .. 'K' | 'M' | 'O' .. 'Q' | 'S' |
              'U' .. 'Z' =>
               goto State_97;
            when 'B' =>
               goto State_98;
            when 'C' =>
               goto State_99;
            when 'L' =>
               goto State_100;
            when 'N' =>
               goto State_101;
            when 'R' =>
               goto State_102;
            when 'T' =>
               goto State_103;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' | 'c' .. 'b' | 'd' .. 'k' | 'm' | 'o' .. 'q' | 's' |
              'u' .. 'z' =>
               goto State_106;
            when 'b' =>
               goto State_107;
            when 'c' =>
               goto State_108;
            when 'l' =>
               goto State_109;
            when 'n' =>
               goto State_110;
            when 'r' =>
               goto State_111;
            when 't' =>
               goto State_112;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_46>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_47>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_119;
            when 'O' =>
               goto State_120;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_121;
            when 'o' =>
               goto State_122;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_48>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_123;
            when 'B' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_124;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_125;
            when 'b' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_126;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_49>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'H' | 'J' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_127;
            when 'I' =>
               goto State_128;
            when 'O' =>
               goto State_129;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'h' | 'j' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_130;
            when 'i' =>
               goto State_131;
            when 'o' =>
               goto State_132;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_50>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' | 'O' .. 'W' | 'Y' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_133;
            when 'N' =>
               goto State_134;
            when 'X' =>
               goto State_135;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' | 'o' .. 'w' | 'y' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_136;
            when 'n' =>
               goto State_137;
            when 'x' =>
               goto State_138;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_51>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_139;
            when 'U' =>
               goto State_140;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_141;
            when 'u' =>
               goto State_142;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_52>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_144;
            when 'O' =>
               goto State_143;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_145;
            when 'o' =>
               goto State_146;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_53>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'E' | 'G' .. 'M' | 'O' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'F' =>
               goto State_147;
            when 'N' =>
               goto State_148;
            when 'S' =>
               goto State_149;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'e' | 'g' .. 'm' | 'o' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 'f' =>
               goto State_150;
            when 'n' =>
               goto State_151;
            when 's' =>
               goto State_152;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_54>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_153;
            when 'O' =>
               goto State_154;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_155;
            when 'o' =>
               goto State_156;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_55>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'O' =>
               goto State_157;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_158;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_56>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'N' | 'P' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_159;
            when 'O' =>
               goto State_160;
            when 'U' =>
               goto State_161;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'n' | 'p' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_162;
            when 'o' =>
               goto State_163;
            when 'u' =>
               goto State_164;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_57>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'E' | 'G' .. 'Q' | 'S' | 'U' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'F' =>
               goto State_165;
            when 'R' =>
               goto State_166;
            when 'T' =>
               goto State_167;
            when 'U' =>
               goto State_168;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'e' | 'g' .. 'q' | 's' | 'u' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'f' =>
               goto State_169;
            when 'r' =>
               goto State_170;
            when 't' =>
               goto State_171;
            when 'u' =>
               goto State_172;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_58>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_173;
            when 'B' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_174;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_175;
            when 'b' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_176;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_59>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_177;
            when 'B' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_178;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_179;
            when 'b' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_180;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_60>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_181;
            when 'U' =>
               goto State_182;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_183;
            when 'u' =>
               goto State_184;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_61>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'y' =>
               goto State_192;
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_185;
            when 'B' .. 'D' | 'F' .. 'G' | 'I' .. 'X' | 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_186;
            when 'H' =>
               goto State_187;
            when 'Y' =>
               goto State_188;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_189;
            when 'b' .. 'd' | 'f' .. 'g' | 'i' .. 'x' | 'z' =>
               goto State_106;
            when 'e' =>
               goto State_190;
            when 'h' =>
               goto State_191;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_62>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_193;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_194;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_63>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'G' | 'I' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'H' =>
               goto State_195;
            when 'I' =>
               goto State_196;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'g' | 'i' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'h' =>
               goto State_197;
            when 'i' =>
               goto State_198;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_64>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_199;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_200;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_65>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Pipe;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_66>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_67>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_104;
            when 'A' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_68>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_69>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_70>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Whitespace;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#9#) .. Character_Type'Val (16#a#) |
              Character_Type'Val (16#c#) .. Character_Type'Val (16#d#) | ' ' =>
               goto State_70;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_71>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_72;
            when '[' =>
               goto State_71;
            when '"' =>
               goto State_202;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_72>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_71;
            when '"' =>
               goto State_73;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_72;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_73>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_String;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_203;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_74>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Prep_Line;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#)    |
              Character_Type'Val (16#b#) .. Character_Type'Val (16#10_ffff#) =>
               goto State_204;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_75>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_String;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '%' =>
               goto State_205;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_76>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. '$' | '&' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;
            when '"' =>
               goto State_206;
            when '[' =>
               goto State_76;
            when '%' =>
               goto State_75;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_77>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_76;
            when '%' =>
               goto State_75;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '$' | '&' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_78>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when ''' =>
               goto State_207;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_79>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_208;
            when ''' =>
               goto State_207;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_80>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Power;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_81>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Comment;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#)    |
              Character_Type'Val (16#b#) .. Character_Type'Val (16#10_ffff#) =>
               goto State_209;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_82>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Doubledot;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_83>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Notequal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_84>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_210;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_85>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_211;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_86>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '+' =>
               goto State_212;
            when '-' =>
               goto State_213;
            when '0' .. '9' =>
               goto State_214;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_87>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_215;
            when '.' =>
               goto State_88;
            when '_' =>
               goto State_216;
            when 'E' | 'e' =>
               goto State_86;
            when '#' | ':' =>
               goto State_84;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_88>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_217;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_89>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Assign;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_90>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Label_Start;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_91>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Diamond;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_92>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Lte;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_93>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Arrow;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_94>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Label_End;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_95>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Gte;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_96>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_97>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_98>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_218;
            when 'S' =>
               goto State_219;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_220;
            when 's' =>
               goto State_221;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_99>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_222;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_223;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_100>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_224;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_225;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_101>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_226;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_227;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_102>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_228;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_229;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_103>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_At;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_104>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_230;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_105>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_106>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_107>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'n' | 'p' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_220;
            when 'A' .. 'N' | 'P' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_218;
            when 'S' =>
               goto State_219;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 's' =>
               goto State_221;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_108>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_222;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_223;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_109>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_224;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_225;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_110>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_226;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_227;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_111>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_228;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_229;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_112>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_At;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_113>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_114>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_115>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_116>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'a' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_117>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_118>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_104;
            when 'A' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_119>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_231;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_232;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_120>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_233;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_234;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_121>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_231;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_232;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_122>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_233;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_234;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_123>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_235;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_236;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_124>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_237;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_238;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_125>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_235;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_236;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_126>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_237;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_238;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_127>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_239;
            when 'L' =>
               goto State_240;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_241;
            when 'l' =>
               goto State_242;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_128>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_243;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_244;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_129>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Do;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_130>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'c' =>
               goto State_241;
            when 'l' =>
               goto State_242;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_239;
            when 'L' =>
               goto State_240;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'k' | 'm' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_131>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'g' =>
               goto State_244;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_243;
            when '_' =>
               goto State_105;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_132>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Do;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_133>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_245;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_246;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_134>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_247;
            when 'T' =>
               goto State_248;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_249;
            when 't' =>
               goto State_250;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_135>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_251;
            when 'I' =>
               goto State_252;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_253;
            when 'i' =>
               goto State_254;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_136>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_246;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_245;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_137>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_247;
            when 'T' =>
               goto State_248;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_249;
            when 't' =>
               goto State_250;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_138>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_251;
            when 'I' =>
               goto State_252;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_253;
            when 'i' =>
               goto State_254;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_139>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_255;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_256;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_140>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_257;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_258;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_141>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_255;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_256;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_142>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'n' =>
               goto State_258;
            when 'N' =>
               goto State_257;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_143>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_259;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_260;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_144>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_261;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_262;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_145>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_261;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_262;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_146>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_259;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_260;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_147>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_If;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_148>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_In;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_149>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Is;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_150>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_If;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_151>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_In;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_152>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Is;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_153>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_263;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_264;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_154>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'o' =>
               goto State_265;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_266;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_155>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'M' =>
               goto State_263;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_264;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_156>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_266;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_265;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_157>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_267;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_268;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_158>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_267;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_268;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_159>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'V' | 'X' .. 'Z' =>
               goto State_97;
            when 'W' =>
               goto State_269;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'v' | 'x' .. 'z' =>
               goto State_106;
            when 'w' =>
               goto State_270;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_160>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_271;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_272;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_161>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_273;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_274;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_162>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_105;
            when 'a' .. 'v' | 'x' .. 'z' =>
               goto State_106;
            when 'w' =>
               goto State_270;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'V' | 'X' .. 'Z' =>
               goto State_97;
            when 'W' =>
               goto State_269;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_163>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_271;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_272;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_164>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_273;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_274;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_165>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Of;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_166>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Or;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_167>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'G' | 'I' .. 'Z' =>
               goto State_97;
            when 'H' =>
               goto State_275;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'g' | 'i' .. 'z' =>
               goto State_106;
            when 'h' =>
               goto State_276;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_168>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'T' =>
               goto State_277;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_278;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_169>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Of;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_170>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Or;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_171>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'G' | 'I' .. 'Z' =>
               goto State_97;
            when 'H' =>
               goto State_275;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'g' | 'i' .. 'z' =>
               goto State_106;
            when 'h' =>
               goto State_276;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_172>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_277;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_278;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_173>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'c' =>
               goto State_279;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'C' =>
               goto State_280;
            when '_' =>
               goto State_105;
            when '[' =>
               goto State_104;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_174>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_281;
            when 'B' .. 'H' | 'J' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_282;
            when 'O' =>
               goto State_283;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_284;
            when 'b' .. 'h' | 'j' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_285;
            when 'o' =>
               goto State_286;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_175>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_280;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_279;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_176>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_281;
            when 'B' .. 'H' | 'J' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_282;
            when 'O' =>
               goto State_283;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_284;
            when 'b' .. 'h' | 'j' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_285;
            when 'o' =>
               goto State_286;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_177>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_287;
            when 'N' =>
               goto State_288;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_289;
            when 'n' =>
               goto State_290;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_178>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'L' | 'N' .. 'M' | 'O' .. 'S' | 'U' |
              'W' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_291;
            when 'M' =>
               goto State_292;
            when 'N' =>
               goto State_293;
            when 'T' =>
               goto State_294;
            when 'V' =>
               goto State_295;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'l' | 'n' .. 'm' | 'o' .. 's' | 'u' |
              'w' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_296;
            when 'm' =>
               goto State_297;
            when 'n' =>
               goto State_298;
            when 't' =>
               goto State_299;
            when 'v' =>
               goto State_300;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_179>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_287;
            when 'N' =>
               goto State_288;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_289;
            when 'n' =>
               goto State_290;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_180>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'L' | 'N' .. 'M' | 'O' .. 'S' | 'U' |
              'W' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_291;
            when 'M' =>
               goto State_292;
            when 'N' =>
               goto State_293;
            when 'T' =>
               goto State_294;
            when 'V' =>
               goto State_295;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'l' | 'n' .. 'm' | 'o' .. 's' | 'u' |
              'w' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_296;
            when 'm' =>
               goto State_297;
            when 'n' =>
               goto State_298;
            when 't' =>
               goto State_299;
            when 'v' =>
               goto State_300;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_181>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_301;
            when 'P' =>
               goto State_302;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_303;
            when 'p' =>
               goto State_304;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_182>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' | 'C' .. 'Z' =>
               goto State_97;
            when 'B' =>
               goto State_305;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' | 'c' .. 'z' =>
               goto State_106;
            when 'b' =>
               goto State_306;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_183>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_301;
            when 'P' =>
               goto State_302;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_303;
            when 'p' =>
               goto State_304;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_184>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' | 'C' .. 'Z' =>
               goto State_97;
            when 'B' =>
               goto State_305;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' | 'c' .. 'z' =>
               goto State_106;
            when 'b' =>
               goto State_306;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_185>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_307;
            when '0' .. '9' =>
               goto State_96;
            when 's' =>
               goto State_308;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_186>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_309;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_310;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_187>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_311;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_312;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_188>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_313;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_314;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_189>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_307;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_308;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_190>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_309;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_310;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_191>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_311;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_312;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_192>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_313;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_314;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_193>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_315;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_316;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_194>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_315;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_316;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_195>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_317;
            when 'I' =>
               goto State_318;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_319;
            when 'i' =>
               goto State_320;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_196>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_321;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_322;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_197>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_317;
            when 'I' =>
               goto State_318;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_319;
            when 'i' =>
               goto State_320;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_198>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_321;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_322;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_199>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_323;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_324;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_200>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_323;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_324;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_201>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_325;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_202>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_String;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_326;
            when '"' =>
               goto State_203;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_203>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_71;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_72;
            when '"' =>
               goto State_73;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_204>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Prep_Line;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#)    |
              Character_Type'Val (16#b#) .. Character_Type'Val (16#10_ffff#) =>
               goto State_204;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_205>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '%' =>
               goto State_75;
            when '[' =>
               goto State_76;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '$' | '&' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_206>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '$' | '&' .. '/' | ':' .. '@' |
              'G' .. 'Z' | '\' .. '`' |
              'g' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;
            when '%' =>
               goto State_75;
            when '[' =>
               goto State_76;
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_327;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_207>>

      case Self.Last_Token_Kind is
         when Ada_Identifier =>
            Match_Kind  := Ada_Tick;
            Match_Index := Index - 1 - 2;
         when others =>
            Match_Kind  := Ada_Char;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_208>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_328;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_209>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Comment;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#)    |
              Character_Type'Val (16#b#) .. Character_Type'Val (16#10_ffff#) =>
               goto State_329;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_210>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_330;
            when '#' | ':' =>
               goto State_331;
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_332;
            when '.' =>
               goto State_333;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_211>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '#' | ':' =>
               goto State_84;
            when '0' .. '9' =>
               goto State_87;
            when '.' =>
               goto State_88;
            when 'E' | 'e' =>
               goto State_86;
            when '_' =>
               goto State_85;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_212>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_214;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_213>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_214;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_214>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_334;
            when '_' =>
               goto State_335;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_215>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '#' | ':' =>
               goto State_84;
            when '_' =>
               goto State_216;
            when 'E' | 'e' =>
               goto State_86;
            when '.' =>
               goto State_88;
            when '0' .. '9' =>
               goto State_215;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_216>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_336;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_217>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_337;
            when '_' =>
               goto State_338;
            when 'E' | 'e' =>
               goto State_339;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_218>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_340;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_341;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_219>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Abs;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_220>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_340;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_341;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_221>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Abs;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_222>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_342;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_343;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_223>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_342;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_343;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_224>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_All;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_225>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_All;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_226>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_And;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_227>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_And;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_228>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_344;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_345;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_229>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_344;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_345;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_230>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_346;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_231>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_347;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_348;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_232>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_347;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_348;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_233>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_349;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_350;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_234>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_349;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_350;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_235>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'E' =>
               goto State_351;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_352;
            when '[' =>
               goto State_104;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_236>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_351;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_352;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_237>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_353;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_354;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_238>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_353;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_354;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_239>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_355;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_356;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_240>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_357;
            when 'B' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_358;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_359;
            when 'b' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_360;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_241>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_104;
            when 'L' =>
               goto State_355;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_356;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_242>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 't' =>
               goto State_360;
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_357;
            when 'B' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_358;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_359;
            when 'b' .. 's' | 'u' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_243>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'I' =>
               goto State_361;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '0' .. '9' =>
               goto State_96;
            when 'i' =>
               goto State_362;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_244>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_361;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_362;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_245>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_363;
            when 'I' =>
               goto State_364;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_365;
            when 'i' =>
               goto State_366;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_246>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_363;
            when 'I' =>
               goto State_364;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_365;
            when 'i' =>
               goto State_366;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_247>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_End;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_248>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_367;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_368;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_249>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_End;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_250>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_367;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_368;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_251>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_369;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_370;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_252>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when 'T' =>
               goto State_371;
            when '_' =>
               goto State_105;
            when '[' =>
               goto State_104;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_372;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_253>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_369;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_370;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_254>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_371;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_372;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_255>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_For;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_256>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_For;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_257>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_373;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_374;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_258>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_373;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_374;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_259>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_375;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_376;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_260>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_375;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_376;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_261>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_377;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_378;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_262>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_377;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_378;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_263>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_379;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_380;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_264>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_379;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_380;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_265>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_381;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_382;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_266>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_381;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_382;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_267>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Mod;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_268>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Mod;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'z' =>
               goto State_106;
            when '_' =>
               goto State_105;
            when '[' =>
               goto State_104;
            when 'A' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_269>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_New;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_270>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_New;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_271>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Not;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_272>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Not;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_273>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_383;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_384;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_274>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when 'L' =>
               goto State_383;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_384;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_275>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_385;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_386;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_276>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_385;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_386;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_277>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Out;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_278>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Out;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_279>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'J' | 'L' .. 'Z' =>
               goto State_97;
            when 'K' =>
               goto State_387;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'j' | 'l' .. 'z' =>
               goto State_106;
            when 'k' =>
               goto State_388;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_280>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'J' | 'L' .. 'Z' =>
               goto State_97;
            when 'K' =>
               goto State_387;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'j' | 'l' .. 'z' =>
               goto State_106;
            when 'k' =>
               goto State_388;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_281>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_389;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_390;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_282>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'U' | 'W' .. 'Z' =>
               goto State_97;
            when 'V' =>
               goto State_391;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'u' | 'w' .. 'z' =>
               goto State_106;
            when 'v' =>
               goto State_392;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_283>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_393;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_394;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_284>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_389;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_390;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_285>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'U' | 'W' .. 'Z' =>
               goto State_97;
            when 'V' =>
               goto State_391;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'u' | 'w' .. 'z' =>
               goto State_106;
            when 'v' =>
               goto State_392;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_286>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_393;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_394;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_287>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 's' =>
               goto State_395;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_396;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_288>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_397;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_398;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_289>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_396;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_395;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_290>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_397;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_398;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_291>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_399;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_400;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_292>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Rem;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_293>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_401;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_402;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_294>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'U' =>
               goto State_403;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'u' =>
               goto State_404;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_295>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_405;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_406;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_296>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_399;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_400;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_297>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Rem;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_298>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_401;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_402;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_299>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'u' =>
               goto State_404;
            when 'A' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'U' =>
               goto State_403;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_300>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_405;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_406;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_301>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_407;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_408;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_302>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_409;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_410;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_303>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_407;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_408;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_304>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when '_' =>
               goto State_105;
            when 'A' =>
               goto State_409;
            when '[' =>
               goto State_104;
            when 'B' .. 'Z' =>
               goto State_97;
            when 'a' =>
               goto State_410;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_305>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'T' =>
               goto State_411;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_412;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_306>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_411;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_412;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_307>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'J' | 'L' .. 'Z' =>
               goto State_97;
            when 'K' =>
               goto State_413;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'j' | 'l' .. 'z' =>
               goto State_106;
            when 'k' =>
               goto State_414;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_308>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'J' | 'L' .. 'Z' =>
               goto State_97;
            when 'K' =>
               goto State_413;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'j' | 'l' .. 'z' =>
               goto State_106;
            when 'k' =>
               goto State_414;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_309>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_415;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_416;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_310>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_415;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_416;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_311>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_417;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_418;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_312>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_417;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_418;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_313>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_419;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_420;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_314>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_419;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_420;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_315>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Use;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_316>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Use;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_317>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_421;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_422;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_318>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'L' =>
               goto State_423;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when 'l' =>
               goto State_424;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when '_' =>
               goto State_105;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_319>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_421;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_422;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_320>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when 'L' =>
               goto State_423;
            when 'A' .. 'K' | 'M' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when 'a' .. 'k' | 'm' .. 'z' =>
               goto State_106;
            when 'l' =>
               goto State_424;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_321>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'G' | 'I' .. 'Z' =>
               goto State_97;
            when 'H' =>
               goto State_425;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'g' | 'i' .. 'z' =>
               goto State_106;
            when 'h' =>
               goto State_426;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_322>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'G' | 'I' .. 'Z' =>
               goto State_97;
            when 'H' =>
               goto State_425;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'g' | 'i' .. 'z' =>
               goto State_106;
            when 'h' =>
               goto State_426;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_323>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Xor;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_324>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Xor;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_325>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_427;
            when '"' =>
               goto State_428;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_326>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_429;
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_430;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_327>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_431;
            when '%' =>
               goto State_75;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. '$' | '&' .. '/' |
              ':' .. '@' | 'G' .. 'Z' | '\' .. '`' |
              'g' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_432;
            when '[' =>
               goto State_76;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_328>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_433;
            when '"' =>
               goto State_434;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_329>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Comment;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#)    |
              Character_Type'Val (16#b#) .. Character_Type'Val (16#10_ffff#) =>
               goto State_329;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_330>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_332;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_331>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'E' | 'e' =>
               goto State_435;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_332>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '#' | ':' =>
               goto State_331;
            when '_' =>
               goto State_330;
            when '.' =>
               goto State_333;
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_332;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_333>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_436;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_334>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_334;
            when '_' =>
               goto State_335;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_335>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_334;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_336>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_216;
            when '.' =>
               goto State_88;
            when '0' .. '9' =>
               goto State_215;
            when '#' | ':' =>
               goto State_84;
            when 'E' | 'e' =>
               goto State_86;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_337>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'E' | 'e' =>
               goto State_339;
            when '_' =>
               goto State_338;
            when '0' .. '9' =>
               goto State_337;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_338>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_337;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_339>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '+' =>
               goto State_437;
            when '-' =>
               goto State_438;
            when '0' .. '9' =>
               goto State_439;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_340>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_440;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_441;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_341>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_440;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_441;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_342>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_442;
            when 'S' =>
               goto State_443;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_444;
            when 's' =>
               goto State_445;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_343>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_442;
            when 'S' =>
               goto State_443;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_444;
            when 's' =>
               goto State_445;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_344>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_446;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_447;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_345>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_446;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_447;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_346>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_448;
            when '"' =>
               goto State_449;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_347>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'N' =>
               goto State_450;
            when '_' =>
               goto State_105;
            when '[' =>
               goto State_104;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_451;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_348>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_450;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_451;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_349>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Body;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_350>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Body;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_351>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_352>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_353>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_452;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_453;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_354>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_452;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_453;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_355>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' =>
               goto State_454;
            when '0' .. '9' =>
               goto State_96;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_455;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_356>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_454;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_455;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_357>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_456;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_457;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_358>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_458;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_459;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_359>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_456;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_457;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_360>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'B' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_458;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_459;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_361>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_460;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_461;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_362>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_460;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_461;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_363>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Else;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;
            when 'A' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_364>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'E' | 'G' .. 'Z' =>
               goto State_97;
            when 'F' =>
               goto State_462;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'e' | 'g' .. 'z' =>
               goto State_106;
            when 'f' =>
               goto State_463;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_365>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Else;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_366>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'E' | 'G' .. 'Z' =>
               goto State_97;
            when 'F' =>
               goto State_462;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'e' | 'g' .. 'z' =>
               goto State_106;
            when 'f' =>
               goto State_463;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_367>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_464;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_465;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_368>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_464;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_465;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_369>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_466;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_467;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_370>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_466;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_467;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_371>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Exit;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_372>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Exit;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_373>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_468;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_469;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_374>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_468;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_469;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_375>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Goto;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_376>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Goto;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_377>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_470;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_471;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_378>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_470;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_471;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_379>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_472;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_473;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_380>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_472;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_473;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_381>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Loop;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_382>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Loop;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when 'a' .. 'z' =>
               goto State_106;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_383>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Null;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_384>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Null;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_385>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_474;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_475;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_386>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_474;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_475;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_387>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_476;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_477;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_388>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'b' .. 'z' =>
               goto State_106;
            when 'B' .. 'Z' =>
               goto State_97;
            when 'a' =>
               goto State_477;
            when '_' =>
               goto State_105;
            when 'A' =>
               goto State_476;
            when '[' =>
               goto State_104;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_389>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_478;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_479;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_390>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_478;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_479;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_391>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_480;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_481;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_392>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_480;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_481;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_393>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_482;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_483;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_394>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_482;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_483;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_395>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_484;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_485;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_396>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_484;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_485;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_397>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_486;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_487;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_398>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_486;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_487;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_399>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_488;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_489;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_400>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_489;
            when 'R' =>
               goto State_488;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_401>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_490;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_491;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_402>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'L' | 'N' .. 'Z' =>
               goto State_97;
            when 'M' =>
               goto State_490;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'l' | 'n' .. 'z' =>
               goto State_106;
            when 'm' =>
               goto State_491;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_403>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_492;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_493;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_404>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_492;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_493;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_405>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_494;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_495;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_406>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_494;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_495;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_407>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_496;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_497;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_408>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_496;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_497;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_409>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_498;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_499;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_410>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_498;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_499;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_411>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_500;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_501;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_412>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'X' | 'Z' =>
               goto State_97;
            when 'Y' =>
               goto State_500;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'x' | 'z' =>
               goto State_106;
            when 'y' =>
               goto State_501;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_413>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Task;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_414>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Task;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_415>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_502;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_503;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_416>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_502;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_503;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_417>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Then;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_418>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Then;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_419>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Type;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_420>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Type;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_421>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_When;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_422>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_When;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_423>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_504;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_505;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_424>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_504;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_505;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_425>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_With;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_426>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_With;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_427>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_427;
            when '"' =>
               goto State_428;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_428>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when ']' =>
               goto State_506;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_429>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when ']' =>
               goto State_507;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_430>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_429;
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_430;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_431>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '$' | '&' .. 'Z' | '\' |
              '^' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;
            when '%' =>
               goto State_75;
            when ']' =>
               goto State_508;
            when '[' =>
               goto State_76;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_432>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. '$' | '&' .. '/' |
              ':' .. '@' | 'G' .. 'Z' | '\' .. '`' |
              'g' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;
            when '[' =>
               goto State_76;
            when '%' =>
               goto State_75;
            when '"' =>
               goto State_431;
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_432;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_433>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_433;
            when '"' =>
               goto State_434;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_434>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when ']' =>
               goto State_509;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_435>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '-' =>
               goto State_510;
            when '+' =>
               goto State_511;
            when '0' .. '9' =>
               goto State_512;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_436>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_513;
            when '#' | ':' =>
               goto State_514;
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_515;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_437>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_439;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_438>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_439;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_439>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_516;
            when '0' .. '9' =>
               goto State_517;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_440>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Abort;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_441>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Abort;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_442>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_518;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_519;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_443>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_520;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_521;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_444>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_518;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_519;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_445>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when '0' .. '9' =>
               goto State_96;
            when 's' =>
               goto State_521;
            when 'S' =>
               goto State_520;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_446>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Array;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_447>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Array;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_448>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' =>
               goto State_448;
            when '"' =>
               goto State_449;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_449>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when ']' =>
               goto State_522;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_450>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Begin;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_451>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Begin;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_452>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_523;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_524;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_453>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_523;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_524;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_454>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_525;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_526;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_455>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_525;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_526;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_456>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Delay;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_457>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Delay;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when 'a' .. 'z' =>
               goto State_106;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_458>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Delta;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_459>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Delta;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'z' =>
               goto State_106;
            when 'A' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_460>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_527;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_528;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_461>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_527;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_528;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_462>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Elsif;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_463>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Elsif;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_464>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Entry;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_465>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Entry;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_466>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_529;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 't' =>
               goto State_530;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_467>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_529;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_530;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_468>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_531;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_532;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_469>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_531;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_532;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_470>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_533;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_534;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_471>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_533;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_534;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_472>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_535;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_536;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_473>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_535;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_536;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_474>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_537;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_538;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_475>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_537;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_538;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_476>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_539;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_540;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_477>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'F' | 'H' .. 'Z' =>
               goto State_97;
            when 'G' =>
               goto State_539;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'f' | 'h' .. 'z' =>
               goto State_106;
            when 'g' =>
               goto State_540;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_478>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' =>
               goto State_541;
            when '0' .. '9' =>
               goto State_96;
            when 'a' =>
               goto State_542;
            when 'b' .. 'z' =>
               goto State_106;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_479>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_541;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_542;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_480>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_543;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_544;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_481>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_543;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_544;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_482>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_545;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_546;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_483>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_545;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_546;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_484>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Raise;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_485>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Raise;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_486>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Range;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_487>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Range;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_488>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_547;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_548;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_489>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_547;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_548;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_490>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_549;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_550;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_491>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_549;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_550;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_492>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'N' =>
               goto State_551;
            when '[' =>
               goto State_104;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_552;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_493>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '[' =>
               goto State_104;
            when 'N' =>
               goto State_551;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_552;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_494>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_553;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_554;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_495>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_553;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_554;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_496>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_555;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_556;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_497>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_555;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_556;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_498>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_557;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_558;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_499>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_557;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_558;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_500>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_559;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_560;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_501>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'O' | 'Q' .. 'Z' =>
               goto State_97;
            when 'P' =>
               goto State_559;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'o' | 'q' .. 'z' =>
               goto State_106;
            when 'p' =>
               goto State_560;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_502>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_561;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_562;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_503>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_561;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_562;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_504>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_While;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_505>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_While;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_506>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_507>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '"' =>
               goto State_73;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '!' | '#' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_72;
            when '[' =>
               goto State_71;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_508>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '%' =>
               goto State_75;
            when '[' =>
               goto State_76;
            when Character_Type'Val (16#0#) .. Character_Type'Val (16#9#) |
              Character_Type'Val (16#b#) .. '$' | '&' .. 'Z' |
              '\' .. Character_Type'Val (16#10_ffff#) =>
               goto State_77;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_509>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when ''' =>
               goto State_563;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_510>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_512;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_511>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_512;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_512>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_564;
            when '_' =>
               goto State_565;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_513>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_515;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_514>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'E' | 'e' =>
               goto State_566;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_515>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' | 'A' .. 'Z' | 'a' .. 'z' =>
               goto State_515;
            when '#' | ':' =>
               goto State_514;
            when '_' =>
               goto State_513;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_516>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_517;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_517>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_517;
            when '_' =>
               goto State_516;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_518>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Accept;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_519>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Accept;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_520>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Access;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_521>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Access;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_522>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'a' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_523>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when '0' .. '9' =>
               goto State_96;
            when '_' =>
               goto State_105;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_567;
            when '[' =>
               goto State_104;
            when 'n' =>
               goto State_568;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_524>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_567;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_568;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_525>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_569;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_570;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_526>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'E' =>
               goto State_569;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'e' =>
               goto State_570;
            when '_' =>
               goto State_105;
            when '[' =>
               goto State_104;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_527>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Digits;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_528>>

      case Self.Last_Token_Kind is
         when Ada_Tick =>
            Match_Kind  := Ada_Identifier;
            Match_Index := Index - 1 - 0;
         when others =>
            Match_Kind  := Ada_Digits;
            Match_Index := Index - 1 - 0;
      end case;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_529>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_571;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_572;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_530>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'H' | 'J' .. 'Z' =>
               goto State_97;
            when 'I' =>
               goto State_571;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'h' | 'j' .. 'z' =>
               goto State_106;
            when 'i' =>
               goto State_572;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_531>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_573;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_574;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_532>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_573;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_574;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_533>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_575;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_576;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_534>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'B' | 'D' .. 'Z' =>
               goto State_97;
            when 'C' =>
               goto State_575;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'b' | 'd' .. 'z' =>
               goto State_106;
            when 'c' =>
               goto State_576;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_535>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_577;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_578;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_536>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'C' | 'E' .. 'Z' =>
               goto State_97;
            when 'D' =>
               goto State_577;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'c' | 'e' .. 'z' =>
               goto State_106;
            when 'd' =>
               goto State_578;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_537>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Others;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_538>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Others;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_539>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_579;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_580;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_540>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_579;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_580;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_541>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Pragma;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when 'a' .. 'z' =>
               goto State_106;
            when '_' =>
               goto State_105;
            when 'A' .. 'Z' =>
               goto State_97;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_542>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Pragma;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_543>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_581;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_582;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_544>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when '[' =>
               goto State_104;
            when 'E' =>
               goto State_581;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when '_' =>
               goto State_105;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'e' =>
               goto State_582;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_545>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'U' =>
               goto State_583;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'u' =>
               goto State_584;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_546>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'T' | 'V' .. 'Z' =>
               goto State_97;
            when 'U' =>
               goto State_583;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 't' | 'v' .. 'z' =>
               goto State_106;
            when 'u' =>
               goto State_584;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_547>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Record;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '0' .. '9' =>
               goto State_96;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_548>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Record;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_549>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_585;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_586;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_550>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'R' | 'T' .. 'Z' =>
               goto State_97;
            when 'S' =>
               goto State_585;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'r' | 't' .. 'z' =>
               goto State_106;
            when 's' =>
               goto State_586;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_551>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Return;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_552>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Return;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_553>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_587;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_588;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_554>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_587;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_588;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_555>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Select;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_556>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Select;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_557>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_589;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_590;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_558>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_589;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_590;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_559>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_591;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_592;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_560>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_591;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_592;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_561>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_593;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_594;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_562>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' =>
               goto State_593;
            when 'B' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' =>
               goto State_594;
            when 'b' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_563>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Char;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      Index := Index + 1;
      goto Stop;

      <<State_564>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Integer;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_565;
            when '0' .. '9' =>
               goto State_564;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_565>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_564;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_566>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '-' =>
               goto State_595;
            when '0' .. '9' =>
               goto State_596;
            when '+' =>
               goto State_597;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_567>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_598;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_599;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_568>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_598;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_599;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_569>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Declare;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_570>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Declare;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_571>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_600;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_601;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_572>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'N' | 'P' .. 'Z' =>
               goto State_97;
            when 'O' =>
               goto State_600;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'n' | 'p' .. 'z' =>
               goto State_106;
            when 'o' =>
               goto State_601;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_573>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_602;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_603;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_574>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_602;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_603;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_575>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Generic;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_576>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Generic;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_577>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Limited;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_578>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Limited;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_579>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Package;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_580>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Package;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_581>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Private;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_582>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Private;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_583>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_604;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_605;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_584>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Q' | 'S' .. 'Z' =>
               goto State_97;
            when 'R' =>
               goto State_604;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'q' | 's' .. 'z' =>
               goto State_106;
            when 'r' =>
               goto State_605;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_585>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Renames;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_586>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Renames;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_587>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Reverse;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_588>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Reverse;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_589>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_606;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_607;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_590>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_606;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_607;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_591>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Subtype;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_592>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Subtype;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_593>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_608;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_609;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_594>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'S' | 'U' .. 'Z' =>
               goto State_97;
            when 'T' =>
               goto State_608;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 's' | 'u' .. 'z' =>
               goto State_106;
            when 't' =>
               goto State_609;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_595>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_596;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_596>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_610;
            when '0' .. '9' =>
               goto State_611;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_597>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_596;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_598>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Constant;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when 'A' .. 'Z' =>
               goto State_97;
            when '_' =>
               goto State_105;
            when '0' .. '9' =>
               goto State_96;
            when 'a' .. 'z' =>
               goto State_106;
            when '[' =>
               goto State_104;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_599>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Constant;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_600>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_612;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_613;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_601>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'M' | 'O' .. 'Z' =>
               goto State_97;
            when 'N' =>
               goto State_612;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'm' | 'o' .. 'z' =>
               goto State_106;
            when 'n' =>
               goto State_613;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_602>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Function;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_603>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Function;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_604>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_614;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_615;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_605>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_614;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_615;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_606>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Separate;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_607>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Separate;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_608>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_616;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_617;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_609>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Identifier;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'D' | 'F' .. 'Z' =>
               goto State_97;
            when 'E' =>
               goto State_616;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'd' | 'f' .. 'z' =>
               goto State_106;
            when 'e' =>
               goto State_617;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_610>>

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_611;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_611>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Decimal;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '_' =>
               goto State_610;
            when '0' .. '9' =>
               goto State_611;

            when others =>

               goto Stop;
         end case;
      end;

      <<State_612>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Exception;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_613>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Exception;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_614>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Procedure;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_615>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Procedure;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_616>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Terminate;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<State_617>>

      Match_Index := Index - 1;
      Match_Kind  := Ada_Terminate;

      if Index > Self.Input_Last then
         goto Stop;
      end if;

      declare
         Input_Char : constant Character_Type := Input (Index);
      begin
         Index := Index + 1;

         case Input_Char is
            when '0' .. '9' =>
               goto State_96;
            when 'A' .. 'Z' =>
               goto State_97;
            when '[' =>
               goto State_104;
            when '_' =>
               goto State_105;
            when 'a' .. 'z' =>
               goto State_106;

            when others =>
               if Input_Char > Character_Type'Val (127) then
                  if Contains (Input_Char, Ranges_6) then
                     goto State_96;
                  end if;
                  if Contains (Input_Char, Ranges_0) then
                     goto State_97;
                  end if;
                  if Contains (Input_Char, Ranges_1) then
                     goto State_106;
                  end if;
                  if Contains (Input_Char, Ranges_2) then
                     goto State_113;
                  end if;
                  if Contains (Input_Char, Ranges_3) then
                     goto State_114;
                  end if;
                  if Contains (Input_Char, Ranges_4) then
                     goto State_115;
                  end if;
                  if Contains (Input_Char, Ranges_7) then
                     goto State_116;
                  end if;
                  if Contains (Input_Char, Ranges_8) then
                     goto State_117;
                  end if;
                  if Contains (Input_Char, Ranges_5) then
                     goto State_118;
                  end if;
               end if;

               goto Stop;
         end case;
      end;

      <<Stop>>
      --  We end up here as soon as the currently analyzed character was not
      --  accepted by any transitions from the current state. Two cases from
      --  there:

      if Match_Index = 0 then
         --  We haven't found a match. Just create an error token and plan to
         --  start a new token at the next character.
         if Index > Self.Input_Last then
            Token         := (Ada_Termination, Index, Index - 1);
            Self.Has_Next := False;
         else
            Token := (Ada_Lexing_Failure, First_Index, First_Index);
         end if;

      elsif Match_Ignore then
         --  We found a match. It must be ignored: resume lexing to start right
         --  after the matched text.
         First_Index := Match_Index + 1;
         goto Start;

      else
         --  We found a match for which we must emit a token
         Token := (Match_Kind, First_Index, Match_Index);
      end if;

      Self.Last_Token := Token;
      if not Is_Trivia (Token.Kind) then
         Self.Last_Token_Kind := Token.Kind;
      end if;
   end Next_Token;

end Libadalang.Lexer_State_Machine;
